using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Data.Linq;
using System.Drawing;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using Microsoft.SharePoint;

using Microsoft.SharePoint.Utilities;
using Microsoft.SharePoint.WebControls;
using SDBBE.Code.DataAccess;
using SDBBE.Code.HelperClasses;
using System.Collections.Specialized;

// REMINDER: 
// Ensure the .ascx has the following; otherwise Tabs won't display properly.
// <link href="/_layouts/SDB/MasterPages/Styles/SDBBETabs.css" rel="stylesheet" type="text/css" />

namespace SDBBE.Control
{
    public partial class InsertContractFull02 : UserControl, IPostBackEventHandler
    {
        #region Class-level Variables

        // Used by ErrorLog
        private static String _SolutionName = "SDBBE";
        private static String _ModuleClassName = "InsertContractFull02";
        private String _TableName;
        private String _Operation;

        //
        private static String _Select = "Select ...";

        // Used by I/O
        //private SDBBEDAO _SDBBEDAO = new SDBBEDAO();

        // Used by this.Page
        PopupHelper _PopupHelper = new PopupHelper();
        RibbonHelper _RibbonHelper = new RibbonHelper();

        // Used by CreateJob() 
        //private SPDalc _SPDalc = new SPDalc();
        private JobType _JobSiteType = JobType.None;

        // Used by Pager
        PagedDataSource pgsource = new PagedDataSource();
        private static int _TabsMaxPageSize = 15;

        // Used by Tabs 
        private String _SortDirection;
        private enum _TabID
        {
            Tab01 = 1,
            Tab02 = 2,
            Tab03 = 3,
            Tab04 = 4,
            Tab05 = 5
        }
        private enum _Tab01Filters
        {
            Archived = 0,
            AwaitingSignatureFromSub = 1,
            Closed = 2,
            ExecutedOpen = 3,
            NoSubcontract = 4,
            TerminatedCancelled = 5,
            UnderNegotiation = 6,
            WorkCompleted = 7
        }
        private enum _Tab01SortColumn
        {
            ContractModNo = 0,
            ContractModDesc = 1,
            ContractModDate = 2,
            ContractModNewEndDate = 3,
            ContractModValue = 4
        }
        private enum _Tab02SortColumn
        {
            LaborStd = 0,
            DocumentTitle = 1,
            EffectiveDate = 2,
        }
        private enum _Tab03SortColumn
        {
            SubcontractNo = 0,
            SubcontractorFullName = 1,
            SubcontractTypeDesc = 2,
            POPStart = 3,
            POPEnd = 4,
            SubcontractStatusDesc = 5,
            SubcontractValue = 6
        }

        #endregion

        #region Page Events

        protected override void OnPreRender(EventArgs e)
        {
            base.OnPreRender(e);
            EnsureChildControls();
        }

        protected void Page_Load(object sender, EventArgs e)
        {
            _TableName = "n/a";
            _Operation = ".Page_Load()";
            try
            {
                // Do regardless if Page.IsPostBack
                _PopupHelper.RegisterModalPopupScript(this.Page, String.Empty, this.div01.ClientID);
                _RibbonHelper.CurrentPage = this.Page;
                _RibbonHelper.AddViewRibbonTab("A");
                AddThisPageTabEvents();
                if (Session["Redirect"] == "Update")
                {
                    Page.Title = "Edit Contract";
                }
                if (!Page.IsPostBack)
                {
                    DisplayInformation();
                }
            }
            catch (Exception ex)
            {
                LogTheError(_TableName, _Operation, String.Empty, ex);
                SPUtility.TransferToErrorPage("During " + _ModuleClassName + _Operation + ", an error occurred.");
            }
        }

        #endregion

        #region Tab Creation and Events

        public void AddThisPageTabEvents()
        {
            _TableName = "n/a";
            _Operation = ".AddThisPageTabEvents()";
            try
            {
                var _IRibbonCommands = new List<IRibbonCommand>();

                // Register the command at the ribbon. Include the callback to the server to generate the XML.
                _IRibbonCommands.Add(new SPRibbonPostBackCommand("Ribbon.EditTab.CommitGrp.SaveChanges", this, "true"));        // Save
                _IRibbonCommands.Add(new SPRibbonPostBackCommand("Ribbon.EditTab.CommitGrp.CancelChanges", this, "true"));      // Cancel

                // Register initialize function(s)
                var _ScriptManager = new SPRibbonScriptManager();
                var _MethodInfo = typeof(SPRibbonScriptManager).GetMethod("RegisterInitializeFunction", BindingFlags.Instance | BindingFlags.NonPublic);
                _MethodInfo.Invoke(_ScriptManager, new object[] { this.Page, "InitPageComponent", "/_layouts/SDBBE/Scripts/PageComponent.js", false, "SDBBE.Controls.PageComponent.initialize()" });
                _MethodInfo.Invoke(_ScriptManager, new object[] { this.Page, "InitPageComponent2", "/_layouts/SDBBE/Scripts/jquery-1.10.2.js", false, "SDBBE.Controls.PageComponent.initialize()" });
                _MethodInfo.Invoke(_ScriptManager, new object[] { this.Page, "InitPageComponent3", "/_layouts/SDBBE/Scripts/ui/1.11.4/jquery-ui.js", false, "SDBBE.Controls.PageComponent.initialize()" });
                _MethodInfo.Invoke(_ScriptManager, new object[] { this.Page, "InitPageComponent4", "/_layouts/SDBBE/Scripts/DatePicker.js", false, "SDBBE.Controls.PageComponent.initialize()" });

                // Register ribbon scripts
                _ScriptManager.RegisterGetCommandsFunction(this.Page, "getGlobalCommands", _IRibbonCommands);
                _ScriptManager.RegisterCommandEnabledFunction(this.Page, "commandEnabled", _IRibbonCommands);
                _ScriptManager.RegisterHandleCommandFunction(this.Page, "handleCommand", _IRibbonCommands);
            }
            catch (Exception ex)
            {
                LogTheError(_TableName, _Operation, String.Empty, ex);
                SPUtility.TransferToErrorPage("During " + _ModuleClassName + _Operation + ", an error occurred.");
            }
        }

        void IPostBackEventHandler.RaisePostBackEvent(String _pEventArgument)
        {
            _TableName = "n/a";
            _Operation = ".IPostBackEventHandler.RaisePostBackEvent()";
            try
            {
                // Handle the event raised with the user clicks the Save or Cancel tab on the ribbon of the modal dialog box.
                SPRibbonPostBackEvent _SPPostBackEvent = SPRibbonPostBackCommand.DeserializePostBackEvent(_pEventArgument);
                if (null != _SPPostBackEvent)
                {
                    switch (_SPPostBackEvent.Id)
                    {
                        case "Ribbon.EditTab.CommitGrp.SaveChanges":
                            {
                                // The Save tab was clicked.  The Mode QueryString argument passed in the Url of the modal dialog
                                // box page contains a value of "Update" or "Insert" indicating whether existing data is being
                                // updated or new data is being created.  If data is being updated, the UpdateItem method is called;
                                // if new data is being created, the InsertItem method is called.
                                Page.Validate();
                                if (Page.IsValid)
                                {

                                    switch (this.Page.Request.QueryString["Mode"])
                                    {
                                        case "Update":
                                            {
                                                UpdateExistingItem();
                                                //_PopupHelper.CloseDialog(this.Page, "Contract has been updated.");
                                                break;
                                            }
                                        case "Insert":
                                            {

                                                InsertNewItem();
                                                String _newQueryString = String.Empty;
                                                String updatedQueryString = String.Empty;
                                                using (SDBBEDAO _SDBBEDAO = new SDBBEDAO())
                                                {

                                                    string _jobNumber = "0";
                                                    Int32 _primeID = 0;
                                                    _jobNumber = lovJobNumber.SelectedValue.ToString();

                                                    view_PrimeContractData _contractData = new view_PrimeContractData();
                                                    _contractData = _SDBBEDAO.SelectItem_view_PrimeContractDatas_ByJobNumber(_jobNumber);
                                                    _primeID = _contractData.PrimeID;

                                                    var nameValues = _primeID.ToString();
                                                    String url = "/sites/pm/_layouts/SDBBE/ListProjectsPrimID.aspx";
                                                    updatedQueryString = "?PrimeID=" + nameValues.ToString();
                                                    _newQueryString = (url + updatedQueryString);
                                                    Server.Transfer(_newQueryString, true);

                                                }

                                                string redirectUrl = _newQueryString;
                                                _PopupHelper.CloseDialog(this.Page, "A new Contract has been added.", redirectUrl, "Edit Contract");



                                                break;
                                            }
                                    }
                                }
                                break;
                            }
                        case "Ribbon.EditTab.CommitGrp.CancelChanges":
                            {
                                // The Cancel tab was clicked. The CancelDialog method causes a JavaScript action on the page that 
                                // displays a message to the user indicating that the operation was cancelled.
                                _PopupHelper.CancelDialog(this.Page);
                                break;
                            }
                    }
                }
            }
            catch (Exception ex)
            {
                LogTheError(_TableName, _Operation, String.Empty, ex);
                SPUtility.TransferToErrorPage("During " + _ModuleClassName + _Operation + ", an error occurred.");
            }
        }

        #endregion

        #region Populate LOVs

        protected void PopulateLOVAwardType()
        {
            _TableName = "AwardTypeData";
            _Operation = ".PopulateLOVAwardType()";
            try
            {
                using (SDBBEDAO _SDBBEDAO = new SDBBEDAO())
                {
                    this.lovAwardType.Enabled = false;
                    this.lovAwardType.DataSource = null;
                    this.lovAwardType.DataBind();
                    this.lovAwardType.DataSource = _SDBBEDAO.SelectIList_AwardTypeDatas();
                    this.lovAwardType.ClearSelection();
                    this.lovAwardType.DataTextField = "AwardTypeDesc";
                    this.lovAwardType.DataValueField = "AwardTypeID";
                    this.lovAwardType.DataBind();
                    this.lovAwardType.Items.Insert(0, new ListItem("Select ...", "Select ..."));
                    this.lovAwardType.SelectedIndex = 0;
                    if (this.lovAwardType.Items.Count > 1)
                        this.lovAwardType.Enabled = true;
                }
            }
            catch (Exception ex)
            {
                LogTheError(_TableName, _Operation, String.Empty, ex);
                SPUtility.TransferToErrorPage("During " + _ModuleClassName + _Operation + ", an error occurred.");
            }
        }

        protected void PopulateLOVCertifiedPayrollSpecialist()
        {
            _TableName = "viewSpecialistByRole";
            _Operation = ".PopulateLOVCertifiedPayrollSpecialist()";
            try
            {
                using (SDBBEDAO _SDBBEDAO = new SDBBEDAO())
                {
                    this.lovCertifiedPayrollSpecialist.Enabled = false;
                    this.lovCertifiedPayrollSpecialist.DataSource = null;
                    this.lovCertifiedPayrollSpecialist.DataBind();
                    this.lovCertifiedPayrollSpecialist.DataSource = _SDBBEDAO.SelectIList_viewSpecialistByRole("Certified Payroll Specialist");
                    this.lovCertifiedPayrollSpecialist.ClearSelection();
                    this.lovCertifiedPayrollSpecialist.DataTextField = "FullName";
                    this.lovCertifiedPayrollSpecialist.DataValueField = "SpecialistID";
                    this.lovCertifiedPayrollSpecialist.DataBind();
                    this.lovCertifiedPayrollSpecialist.Items.Insert(0, new ListItem("Select ...", "Select ..."));
                    this.lovCertifiedPayrollSpecialist.SelectedIndex = 0;
                    if (this.lovCertifiedPayrollSpecialist.Items.Count > 1)
                        this.lovCertifiedPayrollSpecialist.Enabled = true;
                }
            }
            catch (Exception ex)
            {
                LogTheError(_TableName, _Operation, String.Empty, ex);
                SPUtility.TransferToErrorPage("During " + _ModuleClassName + _Operation + ", an error occurred.");
            }
        }

        protected void PopulateLOVClientClass()
        {
            _TableName = "ClientClassData";
            _Operation = ".PopulateLOVClientClass()";
            try
            {
                using (SDBBEDAO _SDBBEDAO = new SDBBEDAO())
                {
                    this.lovClientClass.Enabled = false;
                    this.lovClientClass.DataSource = null;
                    this.lovClientClass.DataBind();
                    this.lovClientClass.DataSource = _SDBBEDAO.SelectIList_ClientClassDatas();
                    this.lovClientClass.ClearSelection();
                    this.lovClientClass.DataTextField = "ClientClassDesc";
                    this.lovClientClass.DataValueField = "ClientClassID";
                    this.lovClientClass.DataBind();
                    this.lovClientClass.Items.Insert(0, new ListItem("Select ...", "Select ..."));
                    this.lovClientClass.SelectedIndex = 0;
                    if (this.lovClientClass.Items.Count > 1)
                        this.lovClientClass.Enabled = true;
                }
            }
            catch (Exception ex)
            {
                LogTheError(_TableName, _Operation, String.Empty, ex);
                SPUtility.TransferToErrorPage("During " + _ModuleClassName + _Operation + ", an error occurred.");
            }
        }

        protected void PopulateLOVClientName()
        {
            _TableName = "ClientData";
            _Operation = "PopulateLOVClientName()";
            try
            {
                using (SDBBEDAO _SDBBEDAO = new SDBBEDAO())
                {
                    this.lovClientName.Enabled = false;
                    this.lovClientName.DataSource = null;
                    this.lovClientName.DataBind();
                    this.lovClientName.DataSource = _SDBBEDAO.SelectIList_ClientDatas();
                    this.lovClientName.ClearSelection();
                    this.lovClientName.DataTextField = "ClientName";
                    this.lovClientName.DataValueField = "ClientID";
                    this.lovClientName.DataBind();
                    this.lovClientName.Items.Insert(0, new ListItem("Select ...", "Select ..."));
                    this.lovClientName.SelectedIndex = 0;
                    if (this.lovClientName.Items.Count > 1)
                        this.lovClientName.Enabled = true;
                }
            }
            catch (Exception ex)
            {
                LogTheError(_TableName, _Operation, String.Empty, ex);
                SPUtility.TransferToErrorPage("During " + _ModuleClassName + _Operation + ", an error occurred.");
            }
        }

        protected void PopulateLOVCompanyLocationID()
        {
            String _TableName = "n/a";
            String _Operation = ".PopulateLOVCompanyLocationID()";
            try
            {
                using (SDBBEDAO _SDBBEDAO = new SDBBEDAO())
                {
                    this.lovCompanyLocationID.Enabled = false;
                    this.lovCompanyLocationID.DataSource = null;
                    this.lovCompanyLocationID.DataBind();
                    this.lovCompanyLocationID.DataSource = _SDBBEDAO.SelectIList_CompanyLocationDatas();
                    this.lovCompanyLocationID.ClearSelection();
                    this.lovCompanyLocationID.DataTextField = "StepSESDirectID";
                    this.lovCompanyLocationID.DataValueField = "StepSESDirectDesc";
                    this.lovCompanyLocationID.DataBind();
                    this.lovCompanyLocationID.Items.Insert(0, new ListItem("Select ...", "Select ..."));
                    this.lovCompanyLocationID.Items.Remove("PRM");
                    this.lovCompanyLocationID.Items.Remove("Unknown");                   
                    this.lovCompanyLocationID.SelectedIndex = 0;
                    if (this.lovCompanyLocationID.Items.Count > 1)
                        this.lovCompanyLocationID.Enabled = true;
                }
            }
            catch (Exception ex)
            {
                LogTheError(_TableName, _Operation, String.Empty, ex);
                SPUtility.TransferToErrorPage("During " + _ModuleClassName + _Operation + ", an error occurred.");
            }
        }

        protected void PopulateLOVContractType()
        {
            // PODOContractData (Contract Type)
            _TableName = "PODOContractData";
            _Operation = ".PopulateLOVPODOContract()";
            try
            {
                using (SDBBEDAO _SDBBEDAO = new SDBBEDAO())
                {
                    this.lovContractType.Enabled = false;
                    this.lovContractType.DataSource = null;
                    this.lovContractType.DataBind();
                    this.lovContractType.DataSource = _SDBBEDAO.SelectIList_PODOContractData();
                    this.lovContractType.DataTextField = "PODOContractType";
                    this.lovContractType.DataValueField = "PODOContractID";
                    this.lovContractType.ClearSelection();
                    this.lovContractType.DataBind();
                    this.lovContractType.Items.Insert(0, new ListItem("Select ...", "Select ..."));
                    this.lovContractType.SelectedIndex = 0;
                    if (this.lovContractType.Items.Count > 1)
                        this.lovContractType.Enabled = true;
                }
            }
            catch (Exception ex)
            {
                LogTheError(_TableName, _Operation, String.Empty, ex);
                SPUtility.TransferToErrorPage("During " + _ModuleClassName + _Operation + ", an error occurred.");
            }
        }

        protected void PopulateLOVContractStatus()
        {
            _TableName = "ContractStatusData";
            _Operation = ".PopulateLOVContractStatus()";
            try
            {
                using (SDBBEDAO _SDBBEDAO = new SDBBEDAO())
                {
                    this.lovContractStatus.Enabled = false;
                    this.lovContractStatus.DataSource = null;
                    this.lovContractStatus.DataBind();
                    this.lovContractStatus.DataSource = _SDBBEDAO.SelectIList_ContractStatusDatas();
                    this.lovContractStatus.DataTextField = "ContractStatusDesc";
                    this.lovContractStatus.DataValueField = "ContractStatusID";
                    this.lovContractStatus.ClearSelection();
                    this.lovContractStatus.DataBind();
                    this.lovContractStatus.Items.Insert(0, new ListItem("Select ...", "Select ..."));
                    this.lovContractStatus.SelectedIndex = 0;
                    if (this.lovContractStatus.Items.Count > 1)
                        this.lovContractStatus.Enabled = true;
                }
            }
            catch (Exception ex)
            {
                LogTheError(_TableName, _Operation, String.Empty, ex);
                SPUtility.TransferToErrorPage("During " + _ModuleClassName + _Operation + ", an error occurred.");
            }
        }

        protected void PopulateLOVCostType()
        {
            _TableName = "ContractTypeData";
            _Operation = ".PopulateLOVCostType()";
            try
            {
                using (SDBBEDAO _SDBBEDAO = new SDBBEDAO())
                {
                    this.lovCostType.Enabled = false;
                    this.lovCostType.DataSource = null;
                    this.lovCostType.DataBind();
                    this.lovCostType.DataSource = _SDBBEDAO.SelectIList_CostTypeDatas();
                    this.lovCostType.DataTextField = "CostTypeDesc";
                    this.lovCostType.DataValueField = "CostTypeID";
                    this.lovCostType.ClearSelection();
                    this.lovCostType.DataBind();
                    this.lovCostType.Items.Insert(0, new ListItem("Select ...", "Select ..."));
                    this.lovCostType.SelectedIndex = 0;
                    if (this.lovCostType.Items.Count > 1)
                        this.lovCostType.Enabled = true;
                }
            }
            catch (Exception ex)
            {
                LogTheError(_TableName, _Operation, String.Empty, ex);
                SPUtility.TransferToErrorPage("During " + _ModuleClassName + _Operation + ", an error occurred.");
            }
        }

        protected void PopulateLOVJobNumber()
        {
            String _TableName = "n/a";
            String _Operation = ".PopulateLOVJobNumber()";
            try
            {
                using (SDBBEDAO _SDBBEDAO = new SDBBEDAO())
                {
                    this.lovJobNumber.Enabled = false;
                    this.lovJobNumber.DataSource = null;
                    this.lovJobNumber.DataBind();
                    this.lovJobNumber.DataSource = _SDBBEDAO.SelectIList_JobNumberAndName();
                    this.lovJobNumber.ClearSelection();
                    this.lovJobNumber.DataTextField = "JobNumberAndName";
                    this.lovJobNumber.DataValueField = "JobNumber";
                    this.lovJobNumber.DataBind();
                    this.lovJobNumber.Items.Insert(0, new ListItem("Select ...", "Select ..."));
                    this.lovJobNumber.SelectedIndex = 0;
                    if (this.lovJobNumber.Items.Count > 1)
                        this.lovJobNumber.Enabled = true;
                }
            }
            catch (Exception ex)
            {
                LogTheError(_TableName, _Operation, String.Empty, ex);
                SPUtility.TransferToErrorPage("During " + _ModuleClassName + _Operation + ", an error occurred.");
            }
        }

        protected void PopulateLOVOrgID()
        {
            _TableName = "AwardeeData | CompanyOrgItem";
            _Operation = ".PopulateLOVOrgID()";
            try
            {
                using (SDBBEDAO _SDBBEDAO = new SDBBEDAO())
                {
                    this.lovCompanyOrgCode.Enabled = false;
                    this.lovCompanyOrgCode.DataSource = null;
                    this.lovCompanyOrgCode.DataBind();
                    this.lovCompanyOrgCode.DataSource = _SDBBEDAO.SelectIList_CompanyOrgData();
                    this.lovCompanyOrgCode.DataTextField = "AwardeeLOVName";
                    this.lovCompanyOrgCode.DataValueField = "AwardeeID";
                    this.lovCompanyOrgCode.ClearSelection();
                    this.lovCompanyOrgCode.DataBind();
                    this.lovCompanyOrgCode.Items.Insert(0, new ListItem("Select ...", "Select ..."));
                    this.lovCompanyOrgCode.SelectedIndex = 0;
                    if (this.lovCompanyOrgCode.Items.Count > 1)
                        this.lovCompanyOrgCode.Enabled = true;
                }
            }
            catch (Exception ex)
            {
                LogTheError(_TableName, _Operation, String.Empty, ex);
                SPUtility.TransferToErrorPage("During " + _ModuleClassName + _Operation + ", an error occurred.");
            }
        }

        protected void PopulateLOVProgramManager()
        {
            _TableName = "viewSpecialistByRole";
            _Operation = ".PopulateLOVProgramManager()";
            try
            {
                using (SDBBEDAO _SDBBEDAO = new SDBBEDAO())
                {
                    this.lovProgramManager.Enabled = false;
                    this.lovProgramManager.DataSource = null;
                    this.lovProgramManager.DataBind();
                    this.lovProgramManager.DataSource = _SDBBEDAO.SelectIList_viewSpecialistByRole("Program Manager");
                    this.lovProgramManager.DataTextField = "FullName";
                    this.lovProgramManager.DataValueField = "SpecialistID";
                    this.lovProgramManager.ClearSelection();
                    this.lovProgramManager.DataBind();
                    this.lovProgramManager.Items.Insert(0, new ListItem("Select ...", "Select ..."));
                    this.lovProgramManager.SelectedIndex = 0;
                    if (this.lovProgramManager.Items.Count > 1)
                        this.lovProgramManager.Enabled = true;
                }
            }
            catch (Exception ex)
            {
                LogTheError(_TableName, _Operation, String.Empty, ex);
                SPUtility.TransferToErrorPage("During " + _ModuleClassName + _Operation + ", an error occurred.");
            }
        }

        protected void PopulateLOVWorkLocation()
        {
            _TableName = "WorkLocationData";
            _Operation = ".PopulateLOVWorkLocation()";
            try
            {
                using (SDBBEDAO _SDBBEDAO = new SDBBEDAO())
                {
                    this.lovWorkLocation.Enabled = false;
                    this.lovWorkLocation.DataSource = null;
                    this.lovWorkLocation.DataBind();
                    this.lovWorkLocation.DataSource = _SDBBEDAO.SelectIList_WorkLocationDatas();
                    this.lovWorkLocation.DataTextField = "WorkLocationDesc";
                    this.lovWorkLocation.DataValueField = "WorkLocationID";
                    this.lovWorkLocation.ClearSelection();
                    this.lovWorkLocation.DataBind();
                    this.lovWorkLocation.Items.Insert(0, new ListItem("Select ...", "Select ..."));
                    this.lovWorkLocation.SelectedIndex = 0;
                    if (this.lovWorkLocation.Items.Count > 1)
                        this.lovWorkLocation.Enabled = true;
                }
            }
            catch (Exception ex)
            {
                LogTheError(_TableName, _Operation, String.Empty, ex);
                SPUtility.TransferToErrorPage("During " + _ModuleClassName + _Operation + ", an error occurred.");
            }
        }

        protected void PopulateLOVWageDetermination()
        {
            _TableName = "WageDeterminationData | WageDeterminationItem";
            _Operation = ".PopulateLOVWageDetermination()";
            try
            {
                using (SDBBEDAO _SDBBEDAO = new SDBBEDAO())
                {
                    this.lovWageDetermination.Enabled = false;
                    this.lovWageDetermination.DataSource = null;
                    this.lovWageDetermination.DataBind();
                    this.lovWageDetermination.DataSource = _SDBBEDAO.SelectIList_AssignWageDeterminationDatas();
                    this.lovWageDetermination.DataTextField = "AssignWageDeterminationDesc";
                    this.lovWageDetermination.DataValueField = "AssignWageDeterminationID";
                    this.lovWageDetermination.ClearSelection();
                    this.lovWageDetermination.DataBind();
                    this.lovWageDetermination.Items.Insert(0, new ListItem("Select ...", "Select ..."));
                    this.lovWageDetermination.SelectedIndex = 0;
                    if (this.lovWageDetermination.Items.Count > 1)
                        this.lovWageDetermination.Enabled = true;
                }
            }
            catch (Exception ex)
            {
                LogTheError(_TableName, _Operation, String.Empty, ex);
                SPUtility.TransferToErrorPage("During " + _ModuleClassName + _Operation + ", an error occurred.");
            }
        }

        #endregion

        #region Button/ImageButton Events

        protected void lbtnTabs_Command(Object sender, CommandEventArgs e)
        {
            SetTabsDefaults();
            CurrentPage = 0;
            String _Tab = e.CommandArgument.ToString();
            switch (_Tab)
            {
                case "Tab01":
                    {
                        // Tab01
                        Session["TabID"] = _TabID.Tab01.ToString();
                        this.panTab01.Visible = true;
                        this.panTab02.Visible = false;
                        this.panTab03.Visible = false;
                        this.panTab04.Visible = false;
                        this.panTab05.Visible = false;
                        this.lbtnTab01.Attributes.Add("class", "selectedTab");
                        this.lbtnTab01.ForeColor = Color.White;
                        ViewState["SortColumn"] = _Tab01SortColumn.ContractModNo;
                        ViewState["SortDirection"] = Constants._Ascending;
                        DisplayTab01();
                        break;
                    }
                case "Tab02":
                    {
                        // Tab02
                        Session["TabID"] = _TabID.Tab02.ToString();
                        this.panTab01.Visible = false;
                        this.panTab02.Visible = true;
                        this.panTab03.Visible = false;
                        this.panTab04.Visible = false;
                        this.panTab05.Visible = false;
                        this.lbtnTab02.Attributes.Add("class", "selectedTab");
                        this.lbtnTab02.ForeColor = Color.White;
                        ViewState["SortColumn"] = _Tab02SortColumn.LaborStd;
                        ViewState["SortDirection"] = Constants._Ascending;
                        DisplayTab02();
                        break;
                    }
                case "Tab03":
                    {
                        // Tab03
                        Session["TabID"] = _TabID.Tab03.ToString();
                        this.panTab01.Visible = false;
                        this.panTab02.Visible = false;
                        this.panTab03.Visible = true;
                        this.panTab04.Visible = false;
                        this.panTab05.Visible = false;
                        this.lbtnTab03.Attributes.Add("class", "selectedTab");
                        this.lbtnTab03.ForeColor = Color.White;
                        ViewState["SortColumn"] = _Tab03SortColumn.SubcontractNo;
                        ViewState["SortDirection"] = Constants._Ascending;
                        DisplayTab03();
                        break;
                    }
                case "Tab04":
                    {
                        // Tab04
                        Session["TabID"] = _TabID.Tab04.ToString();
                        this.panTab01.Visible = false;
                        this.panTab02.Visible = false;
                        this.panTab03.Visible = false;
                        this.panTab04.Visible = true;
                        this.panTab05.Visible = false;
                        this.lbtnTab04.Attributes.Add("class", "selectedTab");
                        this.lbtnTab04.ForeColor = Color.White;
                        ViewState["SortColumn"] = null;
                        ViewState["SortDirection"] = null;
                        DisplayTab04();
                        break;
                    }
                case "Tab05":
                    {
                        // Tab05
                        Session["TabID"] = _TabID.Tab05.ToString();
                        this.panTab01.Visible = false;
                        this.panTab02.Visible = false;
                        this.panTab03.Visible = false;
                        this.panTab04.Visible = false;
                        this.panTab05.Visible = true;
                        this.lbtnTab05.Attributes.Add("class", "selectedTab");
                        this.lbtnTab05.ForeColor = Color.White;
                        ViewState["SortColumn"] = null;
                        ViewState["SortDirection"] = null;
                        DisplayTab05();
                        break;
                    }
                default:
                    {
                        // Tab01
                        Session["TabID"] = _TabID.Tab01.ToString();
                        this.panTab01.Visible = true;
                        this.panTab02.Visible = false;
                        this.panTab03.Visible = false;
                        this.panTab04.Visible = false;
                        this.panTab05.Visible = false;
                        this.lbtnTab01.Attributes.Add("class", "selectedTab");
                        this.lbtnTab01.ForeColor = Color.White;
                        ViewState["SortColumn"] = _Tab01SortColumn.ContractModNo;
                        ViewState["SortDirection"] = Constants._Ascending;
                        DisplayTab01();
                        break;
                    }
            }
        }

        protected void btnAddNewSave_OnClick(object sender, EventArgs e)
        {
        }

        protected void btnAddNewCancel_OnClick(object sender, EventArgs e)
        {
            // By doing nothing, it just closes popup.
        }

        protected void btnCertifiedPayrollSpecialistRefresh_OnClick(object sender, EventArgs e)
        {
            PopulateLOVCertifiedPayrollSpecialist();
        }

        protected void btnClientCertifiedPayrollContactRefresh_OnClick(object sender, EventArgs e)
        {
            AssociateClientName();
            UpdateExistingItem();
            DisplayItemForUpdate();
        }

        protected void btnClientContactRefresh_OnClick(object sender, EventArgs e)
        {
            AssociateClientName();
            UpdateExistingItem();
            DisplayItemForUpdate();
        }
        protected void btnClientNameRefresh_OnClick(object sender, EventArgs e)
        {
            PopulateLOVClientName();
        }

        protected void btnClientTechnicalContactRefresh_OnClick(object sender, EventArgs e)
        {
            AssociateClientName();
            UpdateExistingItem();
            DisplayItemForUpdate();

        }

        protected void btnCompanyOrgCodeRefresh_OnClick(object sender, EventArgs e)
        {
            PopulateLOVOrgID();
        }

        protected void btnContractRevisedValueWordsRefresh_OnClick(object sender, EventArgs e)
        {
            // TBD
        }

        protected void btnJobNumberRefresh_OnClick(object sender, EventArgs e)
        {
            PopulateLOVJobNumber();
        }

        protected void btnProgramManagerRefresh_OnClick(object sender, EventArgs e)
        {
            PopulateLOVProgramManager();
        }

        protected void btnRefresh_OnClick(object sender, EventArgs e)
        {
            PopulateLOVJobNumber();
        }

        protected void btnWageDeterminationRefresh_OnClick(object sender, EventArgs e)
        {
            PopulateLOVWageDetermination();
        }

        protected void btnWorkLocationRefresh_OnClick(object sender, EventArgs e)
        {
            PopulateLOVWorkLocation();
        }

        #endregion

        #region CheckBox Events

        protected void cbxAssigned_OnCheckedChanged(object sender, EventArgs e)
        {
            _TableName = "ContractFlowdownClauseData | ListClauseData | ContractFlowdownClauseProxyData";
            _Operation = ".cbxAssigned_OnCheckedChanged()";

            // E0179.0001 = javascript:openPopup('/_layouts/SDBBE/EditContractFlowdownClauses.aspx?Mode=Update&PrimeID=633&ID=33229', 990, 965);

            // Retrieve pertinent checkbox control
            CheckBox _cbxAssigned = sender as CheckBox;

            // Retreive associated hiddenfield control
            HiddenField _hidPrimeID = (HiddenField)_cbxAssigned.NamingContainer.FindControl("hidPrimeID");
            HiddenField _hidID = (HiddenField)_cbxAssigned.NamingContainer.FindControl("hidID");
            HiddenField _hidClauseID = (HiddenField)_cbxAssigned.NamingContainer.FindControl("hidClauseID");
            HiddenField _hidSortOrder = (HiddenField)_cbxAssigned.NamingContainer.FindControl("hidSortOrder");
            HiddenField _hidIncorporatedBy = (HiddenField)_cbxAssigned.NamingContainer.FindControl("hidIncorporatedBy");
            HiddenField _hidClauseNo = (HiddenField)_cbxAssigned.NamingContainer.FindControl("hidClauseNo");
            HiddenField _hidRegulationID = (HiddenField)_cbxAssigned.NamingContainer.FindControl("hidRegulationID");
            HiddenField _hidAlt = (HiddenField)_cbxAssigned.NamingContainer.FindControl("hidAlt");
            HiddenField _hidClauseTitle = (HiddenField)_cbxAssigned.NamingContainer.FindControl("hidClauseTitle");
            HiddenField _hidEffectiveMonthID = (HiddenField)_cbxAssigned.NamingContainer.FindControl("hidEffectiveMonthID");
            HiddenField _hidEffectiveYearID = (HiddenField)_cbxAssigned.NamingContainer.FindControl("hidEffectiveYearID");

            // Retreive values from hidden fields
            // NOTE: If Unassigned, PrimeID and ID will be zero.
            // THOUGHT HERE: PrimeID can be derived from URL. ID can't be determine when unassigned but that's okay. ClauseID and PrimeID are key.
            using (SDBBEDAO _SDBBEDAO = new SDBBEDAO())
            {
                try
                {
                    Int32 _PrimeID = 0;
                    Int32.TryParse(Page.Request.QueryString["PrimeID"].ToString(), out _PrimeID);
                    Boolean _IOStatus = false;

                    if (_cbxAssigned.Checked)
                    {
                        // Assign a Clause

                        // NOTE: May have to do additional work if Proxy does not exist; need to think through this!!! Might want to use datalist EditTemplate too but for now ...
                        ContractFlowdownClauseData _newItem = new ContractFlowdownClauseData();
                        // 00 - PrimeID
                        if (_hidPrimeID != null)
                        {
                            if (this.lblProxyID.Text == _hidPrimeID.Value.ToString())
                                _newItem.PrimeID = Convert.ToInt32(_hidPrimeID.Value.ToString());
                            else
                                _newItem.PrimeID = Convert.ToInt32(this.lblProxyID.Text);
                        }
                        // 01 - ID
                        if (_hidID != null)
                        {
                            // Don't do anything with it here.
                        }
                        // 02 - ClauseID
                        if (_hidClauseID != null)
                        {
                            _newItem.ClauseID = Convert.ToInt32(_hidClauseID.Value.ToString());
                        }
                        else
                        {
                            throw new Exception("During the process of assigning or unassigning a flowdown clause, ClauseID was not found.");
                        }
                        // 03 - SortOrder NOTE: This formatted number has already been entered in this format into the ListClauseData table. It is there that its format needs addressing.
                        if (_hidSortOrder != null)
                        {
                            _newItem.SortOrder = Convert.ToDecimal(_hidSortOrder.Value.ToString());
                        }
                        else
                        {
                            throw new Exception("During the process of assigning or unassigning a flowdown clause, SortOrder was not found.");
                        }
                        // 04 - IncorporatedBy
                        if (_hidIncorporatedBy != null)
                        {
                            // NOTE: Possible values are: a) Reference (default) or b) Full Text. How to decide which to set is found in Contract itself per Richard Lynn.
                            if (_hidIncorporatedBy.Value.ToString() == String.Empty)
                                _newItem.IncorporatedBy = "Reference";
                            else
                                _newItem.IncorporatedBy = _hidIncorporatedBy.Value.ToString();
                        }
                        else
                        {
                            throw new Exception("During the process of assigning or unassigning a flowdown clause, IncorporatedBy was not found.");
                        }
                        // 05 - ClauseNo
                        if (_hidClauseNo != null)
                        {
                            _newItem.ClauseNo = _hidClauseNo.Value.ToString();
                        }
                        else
                        {
                            throw new Exception("During the process of assigning or unassigning a flowdown clause, ClauseNo was not found.");
                        }
                        // 06 - RegulationID
                        if (_hidRegulationID != null)
                        {
                            _newItem.RegulationID = Convert.ToInt32(_hidRegulationID.Value.ToString());
                        }
                        else
                        {
                            throw new Exception("During the process of assigning or unassigning a flowdown clause, RegulationID was not found.");
                        }
                        // 07 - Altf
                        if (_hidAlt != null)
                        {
                            _newItem.Alt = _hidAlt.Value.ToString();
                        }
                        else
                        {
                            throw new Exception("During the process of assigning or unassigning a flowdown clause, Alt was not found.");
                        }
                        // 08 - ClauseTitle
                        if (_hidClauseTitle != null)
                        {
                            _newItem.ClauseTitle = _hidClauseTitle.Value.ToString();
                        }
                        else
                        {
                            throw new Exception("During the process of assigning or unassigning a flowdown clause, ClauseTitle was not found.");
                        }
                        // 09 - EffectiveMonthID
                        if (_hidEffectiveMonthID != null)
                        {
                            _newItem.EffectiveMonthID = Convert.ToInt32(_hidEffectiveMonthID.Value.ToString());
                        }
                        else
                        {
                            throw new Exception("During the process of assigning or unassigning a flowdown clause, EffectiveMonthID was not found.");
                        }
                        // 10 - EffectiveYearID
                        if (_hidEffectiveYearID != null)
                        {
                            _newItem.EffectiveYearID = Convert.ToInt32(_hidEffectiveYearID.Value.ToString());
                        }
                        else
                        {
                            throw new Exception("During the process of assigning or unassigning a flowdown clause, EffectiveYearID was not found.");
                        }
                        // PrimeContractNumber
                        _newItem.PrimeContractNumber = this.tbxPrimeContractNumber.Text;

                        _IOStatus = _SDBBEDAO.SaveItem_ContractFlowdownClauseData(_newItem);
                    }
                    else
                    {
                        // Unassign a Clause

                        ContractFlowdownClauseData _existingItem = new ContractFlowdownClauseData();
                        if (this.lblProxyID.Text == _hidPrimeID.Value.ToString())
                            _existingItem.PrimeID = Convert.ToInt32(_hidPrimeID.Value.ToString());
                        else
                            _existingItem.PrimeID = Convert.ToInt32(this.lblProxyID.Text);
                        _existingItem.ClauseID = Convert.ToInt32(_hidClauseID.Value.ToString());
                        _existingItem.PrimeContractNumber = this.tbxPrimeContractNumber.Text;
                        _IOStatus = _SDBBEDAO.DeleteItem_ContractFlowdownClauseData(_existingItem);
                    }
                    DisplayTab05();
                }
                catch (Exception ex)
                {
                    LogTheError(_TableName, _Operation, String.Empty, ex);
                    SPUtility.TransferToErrorPage("During " + _ModuleClassName + _Operation + ", an error occurred.");
                }
            }
        }

        #endregion

        #region DataList Events

        protected void dlShowHideFooter_OnPreRender(object sender, EventArgs e)
        {
            DataList objTempDL = (DataList)sender;
            if (objTempDL.Items.Count == 0)
                objTempDL.ShowFooter = true;
            else
                objTempDL.ShowFooter = false;
        }

        #endregion

        #region LOV Events

        protected void lovAwardType_OnSelectedIndexChanged(object sender, EventArgs e)
        {
        }

        protected void lovCertifiedPayrollSpecialist_OnSelectedIndexChanged(object sender, EventArgs e)
        {
            AssociateCertifiedPayrollSpecialist();
        }

        protected void lovClientClass_OnSelectedIndexChanged(object sender, EventArgs e)
        {
        }

        protected void lovClientName_OnSelectedIndexChanged(object sender, EventArgs e)
        {
                switch (this.Page.Request.QueryString["Mode"])
                {
                    case "Update":
                        {
                            AssociateClientName();
                            UpdateExistingItem();
                            DisplayItemForUpdate();
                            AssociateClientContact();
                            AssociateClientTechnicalContact();
                            AssociateClientCertifiedPayrollContact();
                            break;
                        }
                    case "Insert":
                        {
                            AssociateClientName();
                            AssociateClientContact();
                            AssociateClientTechnicalContact();
                            AssociateClientCertifiedPayrollContact();
                            break;
                        }
                }
        }

        protected void lovCompanyLocationID_OnSelectedIndexChanged(object sender, EventArgs e)
        {
            AssociateCompanyLocation();
            AssociateJobNumber();
            AssociateProgramManagerID();
            AssociateCertifiedPayrollSpecialist();
        }

        protected void lovContractStatus_OnSelectedIndexChanged(object sender, EventArgs e)
        {
        }

        protected void lovContractType_OnSelectedIndexChanged(object sender, EventArgs e)
        {
        }

        protected void lovCostType_OnSelectedIndexChanged(object sender, EventArgs e)
        {
        }

        protected void lovJobNumber_OnSelectedIndexChanged(object sender, EventArgs e)
        {
            AssociateJobNumber();

            // Associate JobName
            String[] _JobInfo = this.lovJobNumber.SelectedItem.Text.Split('|');
            if (_JobInfo.Length > 1)
                this.tbxJobName.Text = _JobInfo[1].Trim();
            else
                this.tbxJobName.Text = String.Empty;

            // Associate TaskNo. (DOTONumber)
            String[] _JobNbr = this.lovJobNumber.SelectedValue.Split('.');
            if (_JobNbr.Length > 1)
                this.tbxDOTONumber.Text = _JobNbr[1].Trim();
            else
                this.tbxDOTONumber.Text = String.Empty;

            // Associate JobSiteURL  [SPContext.Current.Site.Url + "/" + _csh.CleanString;]
            String[] _JobNoAndTitle = this.lovJobNumber.SelectedItem.Text.ToLower().Split('|');
            if (_JobNoAndTitle.Length > 1)
            {
                JobSiteURLHelper _helpJobSiteURL = new JobSiteURLHelper(_JobNoAndTitle[0]);
                this.tbxDocumentLibraryURL.Visible = false;
                this.hypDocumentLibraryURL.Visible = true;
                this.hypDocumentLibraryURL.Text = _helpJobSiteURL.JobUrl;
                this.hypDocumentLibraryURL.NavigateUrl = _helpJobSiteURL.JobUrl;
                this.hypDocumentLibraryURL.Target = "_Blank";
            }
            else
            {
                JobSiteURLHelper _helpJobSiteURL = new JobSiteURLHelper(this.lovJobNumber.SelectedItem.Text.ToLower());
                this.tbxDocumentLibraryURL.Visible = false;
                this.hypDocumentLibraryURL.Visible = true;
                this.hypDocumentLibraryURL.Text = _helpJobSiteURL.JobUrl;
                this.hypDocumentLibraryURL.NavigateUrl = _helpJobSiteURL.JobUrl;
                this.hypDocumentLibraryURL.Target = "_Blank";
            }
        }

        protected void lovCompanyOrgCode_OnSelectedIndexChanged(object sender, EventArgs e)
        {
            String[] _AwardeeLOVName = this.lovCompanyOrgCode.SelectedItem.Text.Split('-');
            if ((_AwardeeLOVName.Length) > 1 && (_AwardeeLOVName[3] != null))
                this.tbxAwardeeCageCode.Text = _AwardeeLOVName[3];
            else
                this.tbxAwardeeCageCode.Text = String.Empty;

            AssociateOrgID();
        }

        protected void lovProgramManager_OnSelectedIndexChanged(object sender, EventArgs e)
        {
            AssociateProgramManagerID();
        }

        protected void lovProjectManager_OnSelectedIndexChanged(object sender, EventArgs e)
        {
            //AssociateProjectManagerID();
        }

        protected void lovWorkLocation_OnSelectedIndexChanged(object sender, EventArgs e)
        {
            AssociateWorkLocationID();
        }

        protected void lovWageDetermination_OnSelectedIndexChanged(object sender, EventArgs e)
        {
            FillInWageDetermination();
        }

        #endregion

        #region RadioButton Events

        protected void rbnTab05ShowWhich_OnSelectedIndexChanged(object sender, EventArgs e)
        {
            CurrentPage = 0;
            DisplayTab05();
        }

        #endregion

        #region TBX Events

        protected void tbxContractOriginalValue_OnTextChanged(object sender, EventArgs e)
        {
            // Reformat displayed amount
            Decimal _ContractOriginalValue = new Decimal();
            _ContractOriginalValue = 0;
            String _strContractOriginalValue = this.tbxContractOriginalValue.Text.Replace(",", String.Empty).Replace("$", String.Empty);
            Decimal.TryParse(_strContractOriginalValue, out _ContractOriginalValue);
            this.tbxContractOriginalValue.Text = String.Format("{0:C}", _ContractOriginalValue);
            //
            AssociateContractRevisedValue();
            AssociateContractRevisedValueInWords();
        }

        protected void tbxPOPEndDate_OnTextChanged(object sender, EventArgs e)
        {
            AssociateDaysRemaining();
        }

        protected void tbxContractRevisedValue_OnTextChanged(object sender, EventArgs e)
        {
            AssociateContractRevisedValueInWords();
        }

        #endregion

        #region I/O

        protected void UpdateExistingItem()
        {
            _TableName = "n/a";
            _Operation = ".UpdateExistingItem()";

            String _JobNumber;
            String _PrimeContractNumber;
            String _WebUrl = SPContext.Current.Site.Url;
            try
            {
                Boolean _InsertOnly = false;
                Boolean _returnIOStatusJobData = false;
                Boolean _returnIOStatusPrimeContractData = false;
                JobData _newJobData = new JobData();
                PrimeContractData _existingPrimeContractData = new PrimeContractData();
                PrimeContractData _returnPrimeContractData = new PrimeContractData();
                using (SPLongOperation _SPLongOperation = new SPLongOperation(this.Page))
                
                {
                    //Populate variables
                    _JobNumber = this.lovJobNumber.SelectedValue;
                    _PrimeContractNumber = this.tbxPrimeContractNumber.Text;

                    _SPLongOperation.LeadingHTML = String.Format("Updating Contract Information for Job {0} and Contract {1}", _JobNumber, _PrimeContractNumber);
                    _SPLongOperation.TrailingHTML = "Please wait, this process may take a minute.";
                    _SPLongOperation.Begin();

                    using (SDBBEDAO _SDBBEDAO = new SDBBEDAO())
                    {
                        FillInJobData(_newJobData);

                        // NOTE: Use .SaveJobData because Job could already be in database.
                        _returnIOStatusJobData = _SDBBEDAO.SaveItem_JobData(_newJobData);

                        if (_returnIOStatusJobData == true)
                        {

                            if (!String.IsNullOrEmpty(Page.Request.QueryString["PrimeID"]))
                            {
                                Int32 _PrimeID = 0;
                                Int32.TryParse(Page.Request.QueryString["PrimeID"].ToString(), out _PrimeID);
                                _existingPrimeContractData.PrimeID = _PrimeID;

                                FillInPrimeContractData(_existingPrimeContractData);

                                _returnPrimeContractData = _SDBBEDAO.SaveItem_PrimeContractData(_existingPrimeContractData, _InsertOnly);
                                _returnIOStatusPrimeContractData = _SDBBEDAO.IOStatus;

                                if (_returnIOStatusPrimeContractData == true)
                                {
                                    // Send Email Notification
                                    //SendEmail _SendEmail = new SendEmail();
                                    //SendEmailNotification(_SendEmail);

                                    //if (!String.IsNullOrEmpty(_SendEmail.ResultStatus))
                                    //{
                                    //    throw new Exception("During " + _ModuleClassName + _Operation + " while sending email, an error occurred.");
                                    //}
                                }
                                else
                                {
                                    throw new Exception("During " + _ModuleClassName + _Operation + " while entering Contract, an error occurred.");
                                }
                            }
                        }
                         //Request.UrlReferrer = http://intranet/sties/pm/_layouts/SDBBE/EditContractFull.aspx?Mode=Update&PrimeId=NNNN&IsDlg=1
                         //Redirect to itself without changing ?Mode or PrimeID=NNNN
                        String _UrlReferrer = Request.UrlReferrer.ToString();
                        _SPLongOperation.EndScript("alert('The existing contract has been updated.'); ");
                        _SPLongOperation.End(_UrlReferrer.ToString(), SPRedirectFlags.Trusted, HttpContext.Current, String.Empty, "alert('The existing contract has been updated.');");
                        _SPLongOperation.End(Request.Url.ToString(), SPRedirectFlags.UseSource, HttpContext.Current, string.Empty);
                    }
                }
            }
            catch (System.Threading.ThreadAbortException)
            {

            }
            catch (Exception ex)
            {
                LogTheError(_TableName, _Operation, String.Empty, ex);
                SPUtility.TransferToErrorPage("During " + _ModuleClassName + _Operation + ", an error occurred.");
            }
        }

        protected void InsertNewItem()
        {
            _TableName = "n/a";
            _Operation = ".InsertNewItem()";

            String _JobNumber;
            String _PrimeContractNumber;
            String _WebUrl = SPContext.Current.Site.Url;
            try
            {
                Boolean _InsertOnly = true;
                Boolean _returnIOStatus = false;
                PrimeContractData _newitemPrimeContractData = new PrimeContractData();
                PrimeContractData _returnPrimeContractData = new PrimeContractData();

                using (SPLongOperation _SPLongOperation = new SPLongOperation(this.Page))
                {
                    using (SDBBEDAO _SDBBEDAO = new SDBBEDAO())
                    {
                        // Populate variables
                        _JobNumber = this.lovJobNumber.SelectedValue;
                        _PrimeContractNumber = this.tbxPrimeContractNumber.Text;

                        _SPLongOperation.LeadingHTML = String.Format("Inserting Contract Information for Job {0} and Contract {1}", _JobNumber, _PrimeContractNumber);
                        _SPLongOperation.TrailingHTML = "Please wait, this process may take a minute.";
                        _SPLongOperation.Begin();

                        FillInPrimeContractData(_newitemPrimeContractData);

                        #region *** Setup Statuses ***
                        // NOTE: Insert should be Pending / Pending.

                        // ProjectSetupStatusID
                        _newitemPrimeContractData.ProjectSetupStatusID = 0;                     // 0 = Pending, 1 = Setup

                        // ContractSetupStatusID
                        _newitemPrimeContractData.ContractSetupStatusID = 0;                    // 0 = Pending, 1 = Setup

                        #endregion

                        _returnPrimeContractData = _SDBBEDAO.SaveItem_PrimeContractData(_newitemPrimeContractData, _InsertOnly);
                        _returnIOStatus = _SDBBEDAO.IOStatus;
                        if (_returnIOStatus == true)
                        {
                            // FIX: The ability to send email should be part of application. The email server should be stored in a setup table
                            //      not hardcoded. But for now we're hardcoding to get application of the ground.

                            //SPDalc _SPDalc = new SPDalc();
                            // Remove Pending Project from SPProject
                            //_SPDalc.UpdateProject(_newJobData.JobNumber);                     // REVIEW: May not want to use SP anymore for JobData

                            // Create Job Site
                            //CreateJobSite(_newitemPrimeContractData);

                            // Send Email Notification
                            //SendEmail _SendEmail = new SendEmail();
                            //SendEmailNotification(_SendEmail);

                            //if (!String.IsNullOrEmpty(_SendEmail.ResultStatus))
                            //{
                            //    throw new Exception("During " + _ModuleClassName + _Operation + " while sending email, an error occurred.");
                            //}
                        }
                        else
                        {
                            throw new Exception("During " + _ModuleClassName + _Operation + " while entering Contract, an error occurred.");
                        }
                    }
                    // Request.UrlReferrer = http://intranet/sites/pm/_layouts/SDBBE/EditContractFull.aspx?Mode=Insert&PrimeId=&IsDlg=1
                    // Redirect to itself changing from ?Mode=Insert to ?Mode=Update and changing from &PrimeId= to &PrimeID=NNNN
                    String _UrlReferrer = String.Empty;
                    
                    //_UrlReferrer = _UrlReferrer.Replace("=Insert", "=Update");
                    _UrlReferrer = "/sites/pm/_layouts/SDBBE/ListProjectsPrimID.aspx?PrimeID=";
                    String _newQueryString = String.Empty;
                    String updatedQueryString = String.Empty;
                    using (SDBBEDAO _SDBBEDAO = new SDBBEDAO())
                    {

                        string _jobNumber = "0";
                        Int32 _primeID = 0;
                        _jobNumber = lovJobNumber.SelectedValue.ToString();

                        view_PrimeContractData _contractData = new view_PrimeContractData();
                        _contractData = _SDBBEDAO.SelectItem_view_PrimeContractDatas_ByJobNumber(_jobNumber);
                        _primeID = _contractData.PrimeID;

                        var nameValues = _primeID.ToString();
                        String url = "/sites/pm/_layouts/SDBBE/ListProjectsPrimID.aspx";
                        updatedQueryString = "?PrimeID=" + nameValues.ToString();
                        _newQueryString = (url + updatedQueryString);

                    }
                    _UrlReferrer = _newQueryString;

                    _SPLongOperation.End(_UrlReferrer.ToString(), SPRedirectFlags.Trusted, HttpContext.Current, String.Empty, "alert('The new contract has been inserted.');");
                }
            }
            catch (Exception ex)
            {
                LogTheError(_TableName, _Operation, String.Empty, ex);
                SPUtility.TransferToErrorPage("During " + _ModuleClassName + _Operation + ", an error occurred.");
            }
        }

        protected void FillInJobData(JobData _pJob)
        {
            // JobNumber - This is not auto assigned; therefore it must be filled-in.
            _pJob.JobNumber = this.lovJobNumber.SelectedValue.ToString();

            // JobName (ProjectName)
            _pJob.JobName = this.tbxJobName.Text;

            // JobLocationID = (WorkLocationID)
            Int32 _JobLocationID = 0;
            Int32.TryParse(this.lovWorkLocation.SelectedValue, out _JobLocationID);
            _pJob.JobLocationID = _JobLocationID;

            // JobManagerID (ProgramManagerID)
            //Int32 _JobManagerID = 0;
            //Int32.TryParse(this.tbxProgramManager.Text, out _JobManagerID);
            //_pJob.JobManagerID = _JobManagerID;

            // DateCreated
            DateTimeHelper _dtNowDate = new DateTimeHelper(DateTime.Now.ToString());
            _pJob.DateCreated = _dtNowDate.GetDateTime;

            // DateModified
            _pJob.DateModified = _dtNowDate.GetDateTime;
        }

        protected void FillInPrimeContractData(PrimeContractData _pPrimeContractData)
        {
            using (SDBBEDAO _SDBBEDAO = new SDBBEDAO())
            {
                // PrimeID - For Insert its auto assigned; for Update its pulled from URL parameter

                // ProjectSetupStatusID 0 = Pending, 1 = Setup
                _pPrimeContractData.ProjectSetupStatusID = Convert.ToInt32(this.tbxProjectSetupStatusID.Text);

                // ContractSetupStatusID 0 = Pending, 1 = Setup
                _pPrimeContractData.ContractSetupStatusID = Convert.ToInt32(this.tbxContractSetupStatusID.Text);

                // JobNumber
                _pPrimeContractData.JobNumber = this.lovJobNumber.SelectedValue;

                // ProjctNumber
                String[] _ProjectNumber = this.lovJobNumber.SelectedValue.Split('.');
                if (_ProjectNumber.Length > 1)
                    _pPrimeContractData.ProjectNumber = _ProjectNumber[0];
                else
                    _pPrimeContractData.ProjectNumber = _pPrimeContractData.JobNumber;

                // ProjectName (JobName)
                _pPrimeContractData.ProjectName = this.tbxJobName.Text;

                // Company                                                                          // NOTE: SelectedItem.Text not SelectedValue!
                _pPrimeContractData.CompanyLocationID = this.lovCompanyLocationID.SelectedItem.Text;
                _pPrimeContractData.StepSESDirectID = this.lovCompanyLocationID.SelectedItem.Text;  // NOTE: Column may be deprecated.

                // PrimeContractNumber
                _pPrimeContractData.PrimeContractNumber = this.tbxPrimeContractNumber.Text;

                // TaskNo (DOTONumber)
                _pPrimeContractData.DOTONumber = this.tbxDOTONumber.Text;

                // ContractStatus
                _pPrimeContractData.ContractStatusID = this.lovContractStatus.SelectedValue;

                // ProgramManagerID
                Int32 _ProgramManagerID = 0;
                Int32.TryParse(this.lovProgramManager.SelectedValue, out _ProgramManagerID);
                _pPrimeContractData.ProgramManagerID = _ProgramManagerID;

                // ProjectManagerID
                //Int32 _ProjectManagerID = 0;
                //Int32.TryParse(this.lovProjectManager.SelectedValue, out _ProjectManagerID);
                //_pPrimeContractData.ProjectManagerID = _ProjectManagerID;

                // DocumentLibraryURL ad ContractURL
                if (this.tbxDocumentLibraryURL.Visible == false)
                {
                    _pPrimeContractData.DocumentLibraryURL = this.hypDocumentLibraryURL.NavigateUrl;
                    _pPrimeContractData.ContractURL = String.Empty;
                }
                else
                {
                    _pPrimeContractData.DocumentLibraryURL = String.Empty;                          // NOTE: String.Empty means Job Site not setup.
                    _pPrimeContractData.ContractURL = String.Empty;                                 // NOTE: String.Empty means Job Site not setup.
                }

                // WorkLocationID
                Int32 _WorkLocationID;
                Int32.TryParse(this.lovWorkLocation.SelectedValue, out _WorkLocationID);
                _pPrimeContractData.WorkLocationID = _WorkLocationID;

                // Certified Payroll Specialist ID - Subcontract                                    // FIX!!! Column Missing in PrimeContractData 
                Int32 _certifiedPayrollSpecID;
                Int32.TryParse(lovCertifiedPayrollSpecialist.SelectedValue, out _certifiedPayrollSpecID);
                _pPrimeContractData.CertifiedPayrollSpecialistID = _certifiedPayrollSpecID;

                // ClientID
                Int32 _ClientID = 0;
                Int32.TryParse(this.lovClientName.SelectedValue, out _ClientID);
                _pPrimeContractData.ClientID = _ClientID;

                // ClientClass - ?Subcontract

                // NAICSCode
                _pPrimeContractData.NAICSCode = this.tbxNAICSCode.Text.Substring(0, Math.Min(this.tbxNAICSCode.Text.Length, 50));

                // PODOContract
                Int32 _PODOContractID = 0;
                Int32.TryParse(this.lovContractType.SelectedValue.ToString(), out _PODOContractID);
                _pPrimeContractData.PODOContract = _PODOContractID;

                // PAGCode (AwardTypeID)
                Int32 _AwardTypeID = 0;
                Int32.TryParse(this.lovAwardType.SelectedValue, out _AwardTypeID);
                _pPrimeContractData.AwardTypeID = _AwardTypeID;

                // ContractDate
                DateTimeHelper _dtContractDate = new DateTimeHelper(this.tbxContractDate.Text);
                _pPrimeContractData.ContractDate = _dtContractDate.GetDateTime;

                // POPStartDate
                DateTimeHelper _dtPOPStartDate = new DateTimeHelper(this.tbxPOPStartDate.Text);
                _pPrimeContractData.POPStartDate = _dtPOPStartDate.GetDateTime;

                // POPEndDate
                DateTimeHelper _dtPOPEndDate = new DateTimeHelper(this.tbxPOPEndDate.Text);
                _pPrimeContractData.POPEndDate = _dtPOPEndDate.GetDateTime;

                // AwardeeID (OrgID)
                _pPrimeContractData.AwardeeID = this.lovCompanyOrgCode.SelectedValue;

                // AwardeeCageCode
                // NOTE: Is now associated via AwardeeID

                // ProjectType (ContractTypeID)
                Int32 _CostTypeID = 0;
                Int32.TryParse(this.lovCostType.SelectedValue, out _CostTypeID);
                _pPrimeContractData.ContractTypeID = _CostTypeID;

                // CeilingValue (ContractOriginalValue)
                Decimal _CeilingValue = 0;
                String[] _aryCeilingValue = this.tbxContractOriginalValue.Text.Split('$');
                if (_aryCeilingValue.Count() > 1)
                    Decimal.TryParse(_aryCeilingValue[1].ToString(), out _CeilingValue);
                else
                    Decimal.TryParse(this.tbxContractOriginalValue.Text, out _CeilingValue);
                _pPrimeContractData.CeilingValue = _CeilingValue;

                // FundedValue
                _pPrimeContractData.FundedValue = _CeilingValue;                                    // NOTE: Set to Ceiling Value

                // EstimatedCompletionCost
                _pPrimeContractData.EstimatedCompletionCost = 0;

                // BondsRequired
                if (this.cbxBondsRequired.Checked)
                    _pPrimeContractData.BondsRequired = true;
                else
                    _pPrimeContractData.BondsRequired = false;

                // DavisBacon
                if (this.cbxDavisBacon.Checked)
                    _pPrimeContractData.DavisBacon = true;
                else
                    _pPrimeContractData.DavisBacon = false;

                // E-Verify
                if (this.cbxEVerify.Checked)
                    _pPrimeContractData.EVerify = true;
                else
                    _pPrimeContractData.EVerify = false;

                //// FFATAReporting                                                                 // FIX!!! Add column to PrimeContractData
                //if (this.cbxFFATAReporting.Checked)
                //    _pPrimeContractData.FFATAReporting = true;
                //else
                //    _pPrimeContractData.FFATAReporting = false;

                // FirstTierSubcontractReporting
                _pPrimeContractData.FirstTierSubcontractReporting = false;

                // LiquidatedDamages
                if (this.cbxLiquidatedDamages.Checked)
                    _pPrimeContractData.LiquidatedDamages = true;
                else
                    _pPrimeContractData.LiquidatedDamages = false;

                // NotificationExpendedFunds
                if (this.cbxNotificationFundsExpended.Checked)
                    _pPrimeContractData.NotificationExpendedFunds = true;
                else
                    _pPrimeContractData.NotificationExpendedFunds = false;

                // PrimeContractFileLabel
                _pPrimeContractData.PrimeContractFileLabel = false;

                // RecoveryActReporting
                if (this.cbxRecoveryActReporting.Checked)
                    _pPrimeContractData.RecoveryActReporting = true;
                else
                    _pPrimeContractData.RecoveryActReporting = false;

                // RetainageWithholding
                if (this.cbxRetainageWithholding.Checked)
                    _pPrimeContractData.RetainageWithholding = true;
                else
                    _pPrimeContractData.RetainageWithholding = false;

                // ServiceContractAct
                if (this.cbxServiceContractAct.Checked)
                    _pPrimeContractData.ServiceContractAct = true;
                else
                    _pPrimeContractData.ServiceContractAct = false;

                // TINA
                if (this.cbxTINA.Checked)
                    _pPrimeContractData.TINA = true;
                else
                    _pPrimeContractData.TINA = false;

                // Comments
                _pPrimeContractData.Comments = this.tbxComments.Text;

                #region *** Equivalent to Hidden MS Access Fields ***

                _pPrimeContractData.CodeTypeID = "0";

                // Client CP Submission Instructions                                                // FIX!!! Stored in ClientContactData

                #endregion

                // DateCreated
                DateTimeHelper _dtDateCreated = new DateTimeHelper(DateTime.Now.ToString());
                _pPrimeContractData.DateCreated = _dtDateCreated.GetDateTime;

                // DateModified
                _pPrimeContractData.DateModified = _dtDateCreated.GetDateTime;
            }
        }

        #endregion

        #region Paging

        void PopulateLOVPager()
        {
            for (int i = 1; i <= _TabsMaxPageSize; i++)
            {
                this.lovTab01PageIndex.Items.Add(i.ToString());
                this.lovTab02PageIndex.Items.Add(i.ToString());
                this.lovTab03PageIndex.Items.Add(i.ToString());
                this.lovTab04PageIndex.Items.Add(i.ToString());
                this.lovTab05PageIndex.Items.Add(i.ToString());
            }
            this.lovTab01PageIndex.Items.Insert(0, new ListItem("--Select All--", "--Select All--"));
            this.lovTab02PageIndex.Items.Insert(0, new ListItem("--Select All--", "--Select All--"));
            this.lovTab03PageIndex.Items.Insert(0, new ListItem("--Select All--", "--Select All--"));
            this.lovTab04PageIndex.Items.Insert(0, new ListItem("--Select All--", "--Select All--"));
            this.lovTab05PageIndex.Items.Insert(0, new ListItem("--Select All--", "--Select All--"));
        }

        protected void lovGenericPageIndex_OnSelectedIndexChanged(object sender, EventArgs e)
        {
            // NOTE: Using a generic OnSelectedIndexChanged because with ViewStateEnabled = true all ddl's
            // OnSelectedIndexChanged functions are fired. So using a generic one, we can determine which
            // one was fired.
            DropDownList _ddl = (DropDownList)sender;
            switch (_ddl.ClientID)
            {
                case "ctl00_PlaceHolderMain_InsertContractFull02_lovPageIndex":
                    {
                        CurrentPage = 0;
                        DisplayItemForUpdate();
                        break;
                    }

                case "ctl00_PlaceHolderMain_InsertContractFull02_lovTab01PageIndex":
                    {
                        CurrentPage = 0;
                        DisplayTab01();
                        break;
                    }
                case "ctl00_PlaceHolderMain_InsertContractFull02_lovTab02PageIndex":
                    {
                        CurrentPage = 0;
                        DisplayTab02();
                        break;
                    }
                case "ctl00_PlaceHolderMain_InsertContractFull02_lovTab03PageIndex":
                    {
                        CurrentPage = 0;
                        DisplayTab03();
                        break;
                    }
                case "ctl00_PlaceHolderMain_InsertContractFull02_lovTab04PageIndex":
                    {
                        CurrentPage = 0;
                        DisplayTab04();
                        break;
                    }
                case "ctl00_PlaceHolderMain_InsertContractFull02_lovTab05PageIndex":
                    {
                        CurrentPage = 0;
                        DisplayTab05();
                        break;
                    }
            }
        }

        private int CurrentPage
        {
            get
            {
                // Check view state is null if null then return current index value as "0" else return specific page viewstate value
                if (ViewState["CurrentPage"] == null)
                {
                    return 0;
                }
                else
                {
                    return ((int)ViewState["CurrentPage"]);
                }
            }
            set
            {
                // Set viewstate when page is changed through Paging DataList
                ViewState["CurrentPage"] = value;
            }
        }

        protected void DataListPaging_OnItemCommand(object sender, DataListCommandEventArgs e)
        {
            if (e.CommandName.Equals("newpage"))
            {
                CurrentPage = Convert.ToInt32(e.CommandArgument.ToString());
                String _Tab = Session["TabID"].ToString();
                switch (_Tab)
                {
                    case "Tab01":
                        {
                            DisplayTab01();
                            break;
                        }
                    case "Tab02":
                        {
                            DisplayTab02();
                            break;
                        }
                    case "Tab03":
                        {
                            DisplayTab03();
                            break;
                        }
                    case "Tab04":
                        {
                            DisplayTab04();
                            break;
                        }
                    case "Tab05":
                        {
                            DisplayTab05();
                            break;
                        }
                    default:
                        {
                            DisplayTab01();
                            break;
                        }
                }
            }
        }

        protected void DataListPaging_OnItemDataBound(object sender, DataListItemEventArgs e)
        {
            LinkButton lnkPage = (LinkButton)e.Item.FindControl("Pagingbtn");
            if (lnkPage.CommandArgument.ToString() == CurrentPage.ToString())
            {
                lnkPage.Enabled = false;
            }
        }

        protected void lnkFirst_OnClick(object sender, EventArgs e)
        {
            CurrentPage = 0;
            String _Tab = Session["TabID"].ToString();
            switch (_Tab)
            {
                case "Tab01":
                    {
                        DisplayTab01();
                        break;
                    }
                case "Tab02":
                    {
                        DisplayTab02();
                        break;
                    }
                case "Tab03":
                    {
                        DisplayTab03();
                        break;
                    }
                case "Tab04":
                    {
                        DisplayTab04();
                        break;
                    }
                case "Tab05":
                    {
                        DisplayTab05();
                        break;
                    }
                default:
                    {
                        DisplayTab01();
                        break;
                    }
            }
        }

        protected void lnkPrevious_OnClick(object sender, EventArgs e)
        {
            CurrentPage -= 1;
            if (CurrentPage < 0)
                CurrentPage = 0;
            String _Tab = Session["TabID"].ToString();
            switch (_Tab)
            {
                case "Tab01":
                    {
                        DisplayTab01();
                        break;
                    }
                case "Tab02":
                    {
                        DisplayTab02();
                        break;
                    }
                case "Tab03":
                    {
                        DisplayTab03();
                        break;
                    }
                case "Tab04":
                    {
                        DisplayTab04();
                        break;
                    }
                case "Tab05":
                    {
                        DisplayTab05();
                        break;
                    }
                default:
                    {
                        DisplayTab01();
                        break;
                    }
            }
        }

        protected void lnkNext_OnClick(object sender, EventArgs e)
        {
            CurrentPage += 1;
            Int32 _TotalPages = 0;
            Int32.TryParse(ViewState["totpage"].ToString(), out _TotalPages);
            if (CurrentPage > _TotalPages)
                CurrentPage = _TotalPages;
            String _Tab = Session["TabID"].ToString();
            switch (_Tab)
            {
                case "Tab01":
                    {
                        DisplayTab01();
                        break;
                    }
                case "Tab02":
                    {
                        DisplayTab02();
                        break;
                    }
                case "Tab03":
                    {
                        DisplayTab03();
                        break;
                    }
                case "Tab04":
                    {
                        DisplayTab04();
                        break;
                    }
                case "Tab05":
                    {
                        DisplayTab05();
                        break;
                    }
                default:
                    {
                        DisplayTab01();
                        break;
                    }
            }
        }

        protected void lnkLast_OnClick(object sender, EventArgs e)
        {
            CurrentPage = (Convert.ToInt32(ViewState["totpage"]) - 1);
            String _Tab = Session["TabID"].ToString();
            switch (_Tab)
            {
                case "Tab01":
                    {
                        DisplayTab01();
                        break;
                    }
                case "Tab02":
                    {
                        DisplayTab02();
                        break;
                    }
                case "Tab03":
                    {
                        DisplayTab03();
                        break;
                    }
                case "Tab04":
                    {
                        DisplayTab04();
                        break;
                    }
                case "Tab05":
                    {
                        DisplayTab05();
                        break;
                    }
                default:
                    {
                        DisplayTab01();
                        break;
                    }
            }
        }

        #endregion

        #region DisplayItemForUpdateOrInsert

        protected void DisplayInformation()
        {
            _TableName = "n/a";
            _Operation = ".DisplayInformation()";
            try
            {
                // Verify QueryString has been set in calling module.
                switch (this.Page.Request.QueryString["Mode"])
                {
                    case "Update":
                        {
                       
                            // Update Found
                            // Populate LOVs
                            PopulateLOVAwardType();
                            PopulateLOVCertifiedPayrollSpecialist();
                            PopulateLOVClientClass();
                            PopulateLOVClientName();
                            PopulateLOVCompanyLocationID();
                            PopulateLOVContractStatus();
                            PopulateLOVContractType();
                            PopulateLOVCostType();
                            PopulateLOVJobNumber();
                            PopulateLOVOrgID();
                            PopulateLOVPager();
                            PopulateLOVProgramManager();
                            PopulateLOVWageDetermination();
                            PopulateLOVWorkLocation();  
                            //
                            SetTabsDefaults();
                            //
                            DisplayItemForUpdate();
                            break;
                        }
                    case "Insert":
                        {
                            // Insert Found 
                            // Populate LOVs
                            PopulateLOVAwardType();
                            PopulateLOVCertifiedPayrollSpecialist();
                            PopulateLOVClientClass();
                            PopulateLOVClientName();
                            PopulateLOVCompanyLocationID();
                            PopulateLOVContractStatus();
                            PopulateLOVContractType();
                            PopulateLOVCostType();
                            PopulateLOVJobNumber();
                            PopulateLOVOrgID();
                            PopulateLOVPager();
                            PopulateLOVProgramManager();
                            PopulateLOVWageDetermination();
                            PopulateLOVWorkLocation(); 
                            //
                            SetTabsDefaults();
                            //
                            DisplayItemForInsert();
                            break;
                        }
                    default:
                        {
                            throw new Exception("The QueryString in the calling module has not been set to ?Mode=Insert or ?Mode=Update.");
                        }
                }
            }
            catch (Exception ex)
            {
                LogTheError(_TableName, _Operation, String.Empty, ex);
                SPUtility.TransferToErrorPage("During " + _ModuleClassName + _Operation + ", an error occurred.");
            }
        }

        protected void DisplayItemForUpdate()
        {
            _TableName = "n/a";
            _Operation = ".DisplayItemForUpdate()";
            try
            {
                using (SDBBEDAO _SDBBEDAO = new SDBBEDAO())
                {
                    view_PrimeContractData _DetailItem = new view_PrimeContractData();

                    if (!String.IsNullOrEmpty(Page.Request.QueryString["PrimeID"]))
                    {
                        Int32 _PrimeID = 0;
                        Int32.TryParse(Page.Request.QueryString["PrimeID"].ToString(), out _PrimeID);
                        _DetailItem = _SDBBEDAO.SelectItem_view_PrimeContractDatas_ByPrimeID(_PrimeID);

                        // ProjectSetupStatusID 0 = Pending, 1 = Setup
                        this.tbxProjectSetupStatusID.Text = "1";

                        // ContractSetupStatusID 0 = Pending, 1 = Setup
                        this.tbxContractSetupStatusID.Text = "1";

                        #region div001 - Job Info

                        // Row01: CompanyLocationDesc
                        if (_DetailItem.CompanyLocationID != null)
                        {
                            for (Int32 _i = 0; _i < this.lovCompanyLocationID.Items.Count; _i++)
                            {
                                if (this.lovCompanyLocationID.Items[_i].ToString() == _DetailItem.CompanyLocationID)
                                {
                                    this.lovCompanyLocationID.SelectedIndex = _i;
                                    break;
                                }
                            }
                        }
                        else
                            this.lovCompanyLocationID.SelectedValue = _Select;

                        // Row02: PrimeContractNumber
                        if ((_DetailItem.PrimeContractNumber != null) && (_DetailItem.PrimeContractNumber != String.Empty))
                            this.tbxPrimeContractNumber.Text = _DetailItem.PrimeContractNumber;
                        else
                            this.tbxPrimeContractNumber.Text = String.Empty;

                        // Row03: JobNumber
                        if ((_DetailItem.JobNumber != null) && (_DetailItem.JobNumber != String.Empty))
                            this.lovJobNumber.SelectedValue = _DetailItem.JobNumber;
                        else
                            this.lovJobNumber.SelectedValue = _Select;

                        // Row04: JobName (ProjectName)
                        if ((_DetailItem.JobName != null) && (_DetailItem.JobName != String.Empty))
                            this.tbxJobName.Text = _DetailItem.JobName;
                        else
                            this.tbxJobName.Text = String.Empty;

                        // Row05: WorkLocation
                        if (_DetailItem.WorkLocationID != null)
                            this.lovWorkLocation.SelectedValue = _DetailItem.WorkLocationID.ToString();

                        // Row06: ProgramManager
                        if (_DetailItem.ProgramManagerSpecialistID != null)
                            this.lovProgramManager.SelectedValue = _DetailItem.ProgramManagerSpecialistID.ToString();

                        // Row07: ProjectManager
                        //if (_DetailItem.ProjectManagerSpecialistID != null)
                        //    this.lovProjectManager.SelectedValue = _DetailItem.ProjectManagerSpecialistID.ToString();

                        // Row08: CertifiedPayrollSpecialistFullName                                
                        if ((_DetailItem.CertifiedPayrollSpecialistID != null))
                        this.lovCertifiedPayrollSpecialist.SelectedValue = _DetailItem.CertifiedPayrollSpecialistID.ToString();

                        // Row09: JobFolderURL (JobSiteURL)
                        if ((_DetailItem.DocumentLibraryURL != null) && (_DetailItem.DocumentLibraryURL != String.Empty))
                        {
                            this.tbxDocumentLibraryURL.Visible = false;
                            this.hypDocumentLibraryURL.Visible = true;
                            this.hypDocumentLibraryURL.Text = _DetailItem.DocumentLibraryURL;
                            this.hypDocumentLibraryURL.NavigateUrl = _DetailItem.DocumentLibraryURL;
                        }
                        else
                        {
                            this.tbxDocumentLibraryURL.Visible = true;
                            this.hypDocumentLibraryURL.Visible = false;
                            this.tbxDocumentLibraryURL.Text = "Job Site has not been created.";
                        }

                        #endregion

                        #region div002 - Contract Info

                        // Row01: ContractStatusDesc
                        if ((_DetailItem.ContractStatusID != null) && (_DetailItem.ContractStatusID != String.Empty))
                            this.lovContractStatus.SelectedValue = _DetailItem.ContractStatusID;

                        // Row02: NAICSCode
                        if ((_DetailItem.NAICSCode != null) && (_DetailItem.NAICSCode != String.Empty))
                            this.tbxNAICSCode.Text = _DetailItem.NAICSCode;
                        else
                            this.tbxNAICSCode.Text = String.Empty;

                        // Row03: AwardTypeDesc (PAG Code)
                        if (_DetailItem.AwardTypeID != null)
                            this.lovAwardType.SelectedValue = _DetailItem.AwardTypeID.ToString();

                        // Row??: PODOContract
                        if (_DetailItem.PODOContract != null)
                            this.lovContractType.SelectedValue = _DetailItem.PODOContract.ToString();

                        // Row??: OrgID
                        if ((_DetailItem.AwardeeID != null) && (_DetailItem.AwardeeID != String.Empty))
                            this.lovCompanyOrgCode.SelectedValue = _DetailItem.AwardeeID;

                        // Row04: AwardeeCageCode
                        if ((_DetailItem.AwardeeCageCode != null) && (_DetailItem.AwardeeCageCode != String.Empty))
                            this.tbxAwardeeCageCode.Text = _DetailItem.AwardeeCageCode;
                        else
                            this.tbxAwardeeCageCode.Text = String.Empty;

                        // Row??: ContractDate
                        if (_DetailItem.ContractDate != null)
                            this.tbxContractDate.Text = String.Format("{0:MM/dd/yy}", _DetailItem.ContractDate);
                        else
                            this.tbxContractDate.Text = String.Empty;

                        // Row05: POPStartDate
                        if (_DetailItem.DateCreated != null)
                            this.tbxPOPStartDate.Text = String.Format("{0:MM/dd/yy}", _DetailItem.POPStartDate);
                        else
                            this.tbxPOPStartDate.Text = String.Empty;

                        // Row06: ClientName
                        if (_DetailItem.ClientID != null)
                            this.lovClientName.SelectedValue = _DetailItem.ClientID.ToString();
                        Int32 _ClientID = Convert.ToInt32(_DetailItem.ClientID);

                        // Row06: POPEndDate
                        if (_DetailItem.DateCreated != null)
                            this.tbxPOPEndDate.Text = String.Format("{0:MM/dd/yy}", _DetailItem.POPEndDate);
                        else
                            this.tbxPOPEndDate.Text = String.Empty;

                        // Row07: CostTypeID
                        // FIX!!! 20150305 DPB: Rename column from ContactTypeID to CostTypeID.
                        if (_DetailItem.ContractTypeID != null)
                            this.lovCostType.SelectedValue = _DetailItem.ContractTypeID.ToString();

                        // Row08: DOTONumber
                        if ((_DetailItem.DOTONumber != null) && (_DetailItem.DOTONumber != String.Empty))
                            this.tbxDOTONumber.Text = _DetailItem.DOTONumber;
                        else
                            this.tbxDOTONumber.Text = String.Empty;

                        // Row09: ClientBusinessClassDesc
                        if (_DetailItem.BusinessClassID != null)
                            this.lovClientClass.SelectedValue = _DetailItem.BusinessClassID.ToString();

                        #endregion

                        #region div003a - Modifications

                        // Row01: ContractOriginalValue (CeilingValue)
                        // NOTE:
                        // a) Funded Value used by Lynn Askew
                        // b) Estimated Cost used by Lynn Askew
                        // c) Ceiling Value used by Lynn Askew and Richard Lynn; it represents Contract Original Value
                        if (_DetailItem.CeilingValue != null)
                        {
                            this.tbxContractOriginalValue.Text = String.Format("{0:C}", _DetailItem.CeilingValue);
                            if (_DetailItem.CeilingValue < 0)
                                this.tbxContractOriginalValue.ForeColor = System.Drawing.Color.Red;
                        }
                        else
                            this.tbxContractOriginalValue.Text = String.Format("{0:C}", 0.00);

                        // Row02: ContractModificationCount
                        if (_DetailItem.ContractModificationCount != null)
                            this.tbxContractModificationCount.Text = String.Format("{0:D1}", _DetailItem.ContractModificationCount);
                        else
                            this.tbxContractModificationCount.Text = String.Empty;

                        // Row03: ContractModificationAggregateValue (ContractModificationTotal)
                        if (_DetailItem.ContractModificationAggregateValue != null)
                        {
                            this.tbxContractModificationTotal.Text = String.Format("{0:C}", _DetailItem.ContractModificationAggregateValue);
                            if (_DetailItem.ContractModificationAggregateValue < 0)
                                this.tbxContractModificationTotal.ForeColor = System.Drawing.Color.Red;
                        }
                        else
                            this.tbxContractModificationTotal.Text = String.Format("{0:C}", 0.00);

                        // Row04: ContractRevisedValue
                        if (_DetailItem.ContractRevisedValue != null)
                        {
                            this.tbxContractRevisedValue.Text = String.Format("{0:C}", _DetailItem.ContractRevisedValue);
                            if (_DetailItem.ContractRevisedValue < 0)
                                this.tbxContractRevisedValue.ForeColor = System.Drawing.Color.Red;
                        }
                        else
                            this.tbxContractRevisedValue.Text = String.Format("{0:C}", 0.00);

                        #endregion

                        #region div004 - CheckBoxes

                        // Row01: BondsRequired
                        if (_DetailItem.BondsRequired == true)
                            this.cbxBondsRequired.Checked = true;
                        else
                            this.cbxBondsRequired.Checked = false;

                        // Row02: DavisBacon
                        if (_DetailItem.DavisBacon == true)
                            this.cbxDavisBacon.Checked = true;
                        else
                            this.cbxDavisBacon.Checked = false;

                        // Row03: EVerify
                        if (_DetailItem.EVerify == true)
                            this.cbxEVerify.Checked = true;
                        else
                            this.cbxEVerify.Checked = false;

                        // Row04: FFATAReporting                                                            // FIX!!!
                        //if (_DetailItem.EVerify == true)
                        //    this.cbxFFATAReporting.Checked = true;
                        //else
                        this.cbxFFATAReporting.Checked = false;

                        // Row05: LiquidatedDamages
                        if (_DetailItem.LiquidatedDamages == true)
                            this.cbxLiquidatedDamages.Checked = true;
                        else
                            this.cbxLiquidatedDamages.Checked = false;

                        // Row06: NotificationFundsExpended
                        if (_DetailItem.NotificationExpendedFunds == true)
                            this.cbxNotificationFundsExpended.Checked = true;
                        else
                            this.cbxNotificationFundsExpended.Checked = false;

                        // Row07: RecoveryActReporting
                        if (_DetailItem.RecoveryActReporting == true)
                            this.cbxRecoveryActReporting.Checked = true;
                        else
                            this.cbxRecoveryActReporting.Checked = false;

                        // Row08: RetainageWithholding
                        if (_DetailItem.RetainageWithholding == true)
                            this.cbxRetainageWithholding.Checked = true;
                        else
                            this.cbxRetainageWithholding.Checked = false;

                        // Row09: ServiceContractAct
                        if (_DetailItem.ServiceContractAct == true)
                            this.cbxServiceContractAct.Checked = true;
                        else
                            this.cbxServiceContractAct.Checked = false;

                        // Row10: TINA
                        if (_DetailItem.TINA == true)
                            this.cbxTINA.Checked = true;
                        else
                            this.cbxTINA.Checked = false;

                        #endregion

                        #region div005 - Contact Info

                        // Col01: ClientContactInfo
                        ClientContactData _ClientContactInfoMain = new ClientContactData();
                        Int32 _ClientContactTypeID = 1;
                        _ClientContactInfoMain.ClientContactID = 0;
                        _ClientContactInfoMain = _SDBBEDAO.SelectItem_ClientContactDatas_ByClientContactID(_ClientID, _ClientContactTypeID);

                        //StringBuilder _ClientContactInfo = new StringBuilder();
                        StringBuilder _ClientContactInfoStringMain = new StringBuilder();
                        _ClientContactInfoStringMain.Append(String.Empty);

                        if (_ClientContactInfoMain != null)
                        {
                            //08/12/2015 - Need to add code at end of each line for if the _DetailItem is not NullorEmpty - SDB
                            if (!string.IsNullOrEmpty(_DetailItem.ClientName)) _ClientContactInfoStringMain.Append(_DetailItem.ClientName).AppendLine();
                            if (string.IsNullOrEmpty(_DetailItem.ClientContactNameContractAdministrator)) {_ClientContactInfoStringMain.Append(_ClientContactInfoMain.ClientContactName).AppendLine();} else { _ClientContactInfoStringMain.Append(_DetailItem.ClientContactNameContractAdministrator).AppendLine();}
                            if (string.IsNullOrEmpty(_DetailItem.ClientContactAddress1ContractAdministrator)) { _ClientContactInfoStringMain.Append(_ClientContactInfoMain.ClientContactAddress1).AppendLine(); } else { _ClientContactInfoStringMain.Append(_DetailItem.ClientContactAddress1ContractAdministrator).AppendLine(); }
                            if (string.IsNullOrEmpty(_DetailItem.ClientContactAddress2ContractAdministrator)) { _ClientContactInfoStringMain.Append(_ClientContactInfoMain.ClientContactAddress2).AppendLine(); } else { _ClientContactInfoStringMain.Append(_DetailItem.ClientContactAddress2ContractAdministrator).AppendLine(); }
                            if (string.IsNullOrEmpty(_DetailItem.ClientContactCityContractAdministrator)) { _ClientContactInfoStringMain.Append(_ClientContactInfoMain.ClientContactCity); } else { _ClientContactInfoStringMain.Append(_DetailItem.ClientContactCityContractAdministrator); }
                            if (string.IsNullOrEmpty(_DetailItem.ClientContactStateContractAdministrator)) { _ClientContactInfoStringMain.Append(", " + _ClientContactInfoMain.ClientContactState); } else { _ClientContactInfoStringMain.Append(", " + _DetailItem.ClientContactStateContractAdministrator); }
                            if (string.IsNullOrEmpty(_DetailItem.ClientContactZipContractAdministrator)) { _ClientContactInfoStringMain.Append(" " + _ClientContactInfoMain.ClientContactZip).AppendLine(); } else { _ClientContactInfoStringMain.Append(" " + _DetailItem.ClientContactZipContractAdministrator).AppendLine(); }
                            if (string.IsNullOrEmpty(_DetailItem.ClientContactTelNoContractAdministrator)) { _ClientContactInfoStringMain.Append("TelNo: " + _ClientContactInfoMain.ClientContactTelNo).AppendLine(); } else { _ClientContactInfoStringMain.Append("TelNo: " + _DetailItem.ClientContactTelNoContractAdministrator).AppendLine(); }
                            if (string.IsNullOrEmpty(_DetailItem.ClientContactFaxNoContractAdministrator)) { _ClientContactInfoStringMain.Append("FaxNo: " + _ClientContactInfoMain.ClientContactFaxNo).AppendLine(); } else { _ClientContactInfoStringMain.Append("FaxNo: " + _DetailItem.ClientContactFaxNoContractAdministrator).AppendLine(); }
                            if (string.IsNullOrEmpty(_DetailItem.ClientContactEmailContractAdministrator)) { _ClientContactInfoStringMain.Append("Email: " + _ClientContactInfoMain.ClientContactEmail).AppendLine(); } else { _ClientContactInfoStringMain.Append("Email: " + _DetailItem.ClientContactEmailContractAdministrator).AppendLine(); }
                            this.tbxClientContactInfo.Text = _ClientContactInfoStringMain.ToString();
                            tbxClientContactIDContractAdministrator.Text = _ClientContactInfoMain.ClientContactID.ToString();
                        }
                        else
                        {
                            if (!string.IsNullOrEmpty(_DetailItem.ClientName)) _ClientContactInfoStringMain.Append(_DetailItem.ClientName).AppendLine();
                            this.tbxClientContactInfo.Text = _ClientContactInfoStringMain.ToString();
                            tbxClientContactIDContractAdministrator.Text = "0";
                        }


                        ClientContactData _ClientTechnicalContactInfoMain = new ClientContactData();
                        _ClientContactTypeID = 2;
                        _ClientTechnicalContactInfoMain.ClientContactID = 0;
                        _ClientTechnicalContactInfoMain = _SDBBEDAO.SelectItem_ClientContactDatas_ByClientContactID(_ClientID, _ClientContactTypeID);

                        StringBuilder _ClientTechnicalContactInfoStringMain = new StringBuilder();
                        _ClientTechnicalContactInfoStringMain.Append(String.Empty);

                        if (_ClientTechnicalContactInfoMain != null)
                        {
                            //08/12/2015 - Need to add code at end of each line for if the _DetailItem is not NullorEmpty - SDB
                            if (!string.IsNullOrEmpty(_DetailItem.ClientName)) _ClientTechnicalContactInfoStringMain.Append(_DetailItem.ClientName).AppendLine();
                            if (string.IsNullOrEmpty(_DetailItem.ClientContactNameContractAdministrator)) { _ClientTechnicalContactInfoStringMain.Append(_ClientTechnicalContactInfoMain.ClientContactName).AppendLine(); } else { _ClientTechnicalContactInfoStringMain.Append(_DetailItem.ClientContactNameContractAdministrator).AppendLine(); }
                            if (string.IsNullOrEmpty(_DetailItem.ClientContactAddress1ContractAdministrator)) { _ClientTechnicalContactInfoStringMain.Append(_ClientTechnicalContactInfoMain.ClientContactAddress1).AppendLine(); } else { _ClientTechnicalContactInfoStringMain.Append(_DetailItem.ClientContactAddress1ContractAdministrator).AppendLine(); }
                            if (string.IsNullOrEmpty(_DetailItem.ClientContactAddress2ContractAdministrator)) { _ClientTechnicalContactInfoStringMain.Append(_ClientTechnicalContactInfoMain.ClientContactAddress2).AppendLine(); } else { _ClientTechnicalContactInfoStringMain.Append(_DetailItem.ClientContactAddress2ContractAdministrator).AppendLine(); }
                            if (string.IsNullOrEmpty(_DetailItem.ClientContactCityContractAdministrator)) { _ClientTechnicalContactInfoStringMain.Append(_ClientTechnicalContactInfoMain.ClientContactCity); } else { _ClientTechnicalContactInfoStringMain.Append(_DetailItem.ClientContactCityContractAdministrator); }
                            if (string.IsNullOrEmpty(_DetailItem.ClientContactStateContractAdministrator)) { _ClientTechnicalContactInfoStringMain.Append(", " + _ClientTechnicalContactInfoMain.ClientContactState); } else { _ClientTechnicalContactInfoStringMain.Append(", " + _DetailItem.ClientContactStateContractAdministrator); }
                            if (string.IsNullOrEmpty(_DetailItem.ClientContactZipContractAdministrator)) { _ClientTechnicalContactInfoStringMain.Append(" " + _ClientTechnicalContactInfoMain.ClientContactZip).AppendLine(); } else { _ClientTechnicalContactInfoStringMain.Append(" " + _DetailItem.ClientContactZipContractAdministrator).AppendLine(); }
                            if (string.IsNullOrEmpty(_DetailItem.ClientContactTelNoContractAdministrator)) { _ClientTechnicalContactInfoStringMain.Append("TelNo: " + _ClientTechnicalContactInfoMain.ClientContactTelNo).AppendLine(); } else { _ClientTechnicalContactInfoStringMain.Append("TelNo: " + _DetailItem.ClientContactTelNoContractAdministrator).AppendLine(); }
                            if (string.IsNullOrEmpty(_DetailItem.ClientContactFaxNoContractAdministrator)) { _ClientTechnicalContactInfoStringMain.Append("FaxNo: " + _ClientTechnicalContactInfoMain.ClientContactFaxNo).AppendLine(); } else { _ClientTechnicalContactInfoStringMain.Append("FaxNo: " + _DetailItem.ClientContactFaxNoContractAdministrator).AppendLine(); }
                            if (string.IsNullOrEmpty(_DetailItem.ClientContactEmailContractAdministrator)) { _ClientTechnicalContactInfoStringMain.Append("Email: " + _ClientTechnicalContactInfoMain.ClientContactEmail).AppendLine(); } else { _ClientTechnicalContactInfoStringMain.Append("Email: " + _DetailItem.ClientContactEmailContractAdministrator).AppendLine(); }
                            this.tbxClientTechnicalContactInfo.Text = _ClientTechnicalContactInfoStringMain.ToString();
                            tbxClientContactIDTechnicalAdministrator.Text = _ClientTechnicalContactInfoMain.ClientContactID.ToString();
                        }
                        else
                        {
                            if (!string.IsNullOrEmpty(_DetailItem.ClientName)) _ClientTechnicalContactInfoStringMain.Append(_DetailItem.ClientName).AppendLine();
                            this.tbxClientTechnicalContactInfo.Text = _ClientTechnicalContactInfoStringMain.ToString();
                            tbxClientContactIDTechnicalAdministrator.Text = "0";
                        }


                        ClientContactData _ClientCPContactInfoMain = new ClientContactData();
                        _ClientContactTypeID = 3;
                        _ClientCPContactInfoMain.ClientContactID = 0;
                        _ClientCPContactInfoMain = _SDBBEDAO.SelectItem_ClientContactDatas_ByClientContactID(_ClientID, _ClientContactTypeID);

                        StringBuilder _ClientCPContactInfoStringMain = new StringBuilder();
                        _ClientCPContactInfoStringMain.Append(String.Empty);

                        if (_ClientCPContactInfoMain != null)
                        {
                            //08/12/2015 - Need to add code at end of each line for if the _DetailItem is not NullorEmpty - SDB
                            if (!string.IsNullOrEmpty(_DetailItem.ClientName)) _ClientCPContactInfoStringMain.Append(_DetailItem.ClientName).AppendLine();
                            if (string.IsNullOrEmpty(_DetailItem.ClientContactNameContractAdministrator)) { _ClientCPContactInfoStringMain.Append(_ClientCPContactInfoMain.ClientContactName).AppendLine(); } else { _ClientCPContactInfoStringMain.Append(_DetailItem.ClientContactNameContractAdministrator).AppendLine(); }
                            if (string.IsNullOrEmpty(_DetailItem.ClientContactAddress1ContractAdministrator)) { _ClientCPContactInfoStringMain.Append(_ClientCPContactInfoMain.ClientContactAddress1).AppendLine(); } else { _ClientCPContactInfoStringMain.Append(_DetailItem.ClientContactAddress1ContractAdministrator).AppendLine(); }
                            if (string.IsNullOrEmpty(_DetailItem.ClientContactAddress2ContractAdministrator)) { _ClientCPContactInfoStringMain.Append(_ClientCPContactInfoMain.ClientContactAddress2).AppendLine(); } else { _ClientCPContactInfoStringMain.Append(_DetailItem.ClientContactAddress2ContractAdministrator).AppendLine(); }
                            if (string.IsNullOrEmpty(_DetailItem.ClientContactCityContractAdministrator)) { _ClientCPContactInfoStringMain.Append(_ClientCPContactInfoMain.ClientContactCity); } else { _ClientCPContactInfoStringMain.Append(_DetailItem.ClientContactCityContractAdministrator); }
                            if (string.IsNullOrEmpty(_DetailItem.ClientContactStateContractAdministrator)) { _ClientCPContactInfoStringMain.Append(", " + _ClientCPContactInfoMain.ClientContactState); } else { _ClientCPContactInfoStringMain.Append(", " + _DetailItem.ClientContactStateContractAdministrator); }
                            if (string.IsNullOrEmpty(_DetailItem.ClientContactZipContractAdministrator)) { _ClientCPContactInfoStringMain.Append(" " + _ClientCPContactInfoMain.ClientContactZip).AppendLine(); } else { _ClientCPContactInfoStringMain.Append(" " + _DetailItem.ClientContactZipContractAdministrator).AppendLine(); }
                            if (string.IsNullOrEmpty(_DetailItem.ClientContactTelNoContractAdministrator)) { _ClientCPContactInfoStringMain.Append("TelNo: " + _ClientCPContactInfoMain.ClientContactTelNo).AppendLine(); } else { _ClientCPContactInfoStringMain.Append("TelNo: " + _DetailItem.ClientContactTelNoContractAdministrator).AppendLine(); }
                            if (string.IsNullOrEmpty(_DetailItem.ClientContactFaxNoContractAdministrator)) { _ClientCPContactInfoStringMain.Append("FaxNo: " + _ClientCPContactInfoMain.ClientContactFaxNo).AppendLine(); } else { _ClientCPContactInfoStringMain.Append("FaxNo: " + _DetailItem.ClientContactFaxNoContractAdministrator).AppendLine(); }
                            if (string.IsNullOrEmpty(_DetailItem.ClientContactEmailContractAdministrator)) { _ClientCPContactInfoStringMain.Append("Email: " + _ClientCPContactInfoMain.ClientContactEmail).AppendLine(); } else { _ClientCPContactInfoStringMain.Append("Email: " + _DetailItem.ClientContactEmailContractAdministrator).AppendLine(); }
                            this.tbxClientCertifiedPayrollContactInfo.Text = _ClientCPContactInfoStringMain.ToString();
                            tbxClientContactIDCPAdministrator.Text = _ClientCPContactInfoMain.ClientContactID.ToString();
                        }
                        else
                        {
                            if (!string.IsNullOrEmpty(_DetailItem.ClientName)) _ClientCPContactInfoStringMain.Append(_DetailItem.ClientName).AppendLine();
                            this.tbxClientCertifiedPayrollContactInfo.Text = _ClientCPContactInfoStringMain.ToString();
                            tbxClientContactIDCPAdministrator.Text = "0";
                        }




                        // Col04: ClientCPSubmissionInstructions
                        if ((_DetailItem.CPSubmissionInstructions != null) && (_DetailItem.CPSubmissionInstructions != String.Empty))
                            this.tbxClientCPSubmissionInstructions.Text = _DetailItem.CPSubmissionInstructions;
                        else
                            this.tbxClientCPSubmissionInstructions.Text = String.Empty;

                        // Col04: Comments
                        if (_DetailItem.Comments != null)
                            if (_DetailItem.Comments != String.Empty)
                                this.tbxComments.Text = _DetailItem.Comments;
                            else
                                this.tbxComments.Text = String.Empty;
                        else
                            this.tbxComments.Text = String.Empty;

                        #endregion

                        // All Popups
                        IList<view_PrimeContractData> _dl = new List<view_PrimeContractData>();
                        _dl.Add(_DetailItem);

                        // Titlebar Popups (left-to-right)
                        this.dlEditContractModification.DataSource = _dl;
                        this.dlEditContractModification.DataBind();

                        this.dlEditWageDetermination.DataSource = _dl;
                        this.dlEditWageDetermination.DataBind();

                        this.dlEditSubcontract.DataSource = _dl;
                        this.dlEditSubcontract.DataBind();

                        this.dlViewContractInfoSheet.DataSource = _dl;
                        this.dlViewContractInfoSheet.DataBind();

                        this.dlEditUpdateLog.DataSource = _dl;
                        this.dlEditUpdateLog.DataBind();

                        this.dlUploadDocument.DataSource = _dl;
                        this.dlUploadDocument.DataBind();

                        // Embeded Popups
                        AssociateCertifiedPayrollSpecialist();
                        AssociateClientCertifiedPayrollContact();
                        AssociateClientContact();
                        AssociateClientName();
                        AssociateClientTechnicalContact();
                        AssociateCompanyLocation();
                        AssociateCompanyOrgCode();
                        AssociateDaysRemaining();
                        AssociateJobNumber();
                        AssociateProgramManagerID();
                        AssociateContractRevisedValueInWords();
                        AssociateWageDetermination();
                        AssociateWorkLocationID();

                        // Filters
                        if (Session["Filters"] == null)
                            Session["Filters"] = _Tab01Filters.ExecutedOpen;

                        // Display Tab01
                        Session["TabID"] = _TabID.Tab01.ToString();
                        this.panTab01.Visible = true;
                        this.panTab02.Visible = false;
                        this.panTab03.Visible = false;
                        this.panTab04.Visible = false;
                        this.lbtnTab01.Attributes.Add("class", "selectedTab");
                        this.lbtnTab01.ForeColor = Color.White;
                        ViewState["SortColumn"] = _Tab01SortColumn.ContractModNo;
                        ViewState["SortDirection"] = Constants._Ascending;
                        DisplayTab01();
                        pan01.Update();
                    }
                    else
                    {
                        throw new Exception("The QueryString PrimeID is null.");
                    }
                }
            }
            catch (Exception ex)
            {
                LogTheError(_TableName, _Operation, String.Empty, ex);
                SPUtility.TransferToErrorPage("During " + _ModuleClassName + _Operation + ", an error occurred.");
            }
        }

        protected void DisplayItemForInsert()
        {
            _TableName = "n/a";
            _Operation = ".DisplayItemForInsert()";
            try
            {
                PrimeContractData _newItem = new PrimeContractData();

                using (SDBBEDAO _SDBBEDAO = new SDBBEDAO())
                {
                    // ProjectSetupStatusID 0 = Pending, 1 = Setup
                    this.tbxProjectSetupStatusID.Text = "0";

                    // ContractSetupStatusID 0 = Pending, 1 = Setup
                    this.tbxContractSetupStatusID.Text = "0";

                    // Hidden Fields
                    this.tbxClientContactIDContractAdministrator.Text = String.Empty;
                    this.tbxClientContactIDTechnicalAdministrator.Text = String.Empty;
                    this.tbxClientCPSubmissionInstructions.Text = String.Empty;

                    #region *** Row01 ***

                    // Col01: JobNumber
                    this.lovJobNumber.SelectedValue = _Select;

                    // Col02: PrimeContractNumber
                    this.tbxPrimeContractNumber.Text = String.Empty;

                    // Col03: ProgramManager
                    this.lovProgramManager.SelectedValue = _Select;

                    #endregion

                    #region *** Row02 ***

                    // Col01: JobName (ProjectName)
                    this.tbxJobName.Text = String.Empty;

                    // Col02: TaskNo (DOTONumber)
                    this.tbxDOTONumber.Text = String.Empty;

                    // Col03: ProjectManager
                    //this.lovProjectManager.SelectedValue = _Select;

                    #endregion

                    #region *** Row03 ***

                    // Col01: CompanyLocationDesc
                    this.lovCompanyLocationID.SelectedValue = _Select;

                    // Col02: ContractStatusDesc
                    this.lovContractStatus.SelectedValue = "Active";

                    // Col03: JobFolderURL (JobSiteURL)
                    this.tbxDocumentLibraryURL.Visible = true;
                    this.hypDocumentLibraryURL.Visible = false;
                    this.tbxDocumentLibraryURL.Text = "Job Site has not been created.";

                    #endregion

                    #region *** Row04 ***

                    // Col01: WorkLocation
                    this.lovWorkLocation.SelectedValue = _Select;

                    // Col02: NAICSCode
                    this.tbxNAICSCode.Text = String.Empty;

                    // Col01: ContractOriginalValue (CeilingValue)
                    // NOTE:
                    // a) Funded Value used by Lynn Askew
                    // b) Estimated Cost used by Lynn Askew
                    // c) Ceiling Value used by Lynn Askew and Richard Lynn; it represents Contract Original Value
                    this.tbxContractOriginalValue.Text = String.Format("{0:C}", 0.00);
                    this.tbxContractOriginalValue.AutoPostBack = true;
                    this.tbxContractOriginalValue.Enabled = true;
                    #endregion

                    #region *** Row05 ***

                    // Col01: CertifiedPayrollSpecialist
                    this.lovCertifiedPayrollSpecialist.SelectedValue = _Select;

                    // Col02: AwardTypeDesc (PAG Code)
                    this.lovAwardType.SelectedValue = _Select;

                    // Col03: ContractModificationCount
                    this.tbxContractModificationCount.Text = String.Format("{0:D1}", 0);

                    #endregion

                    #region *** Row06 ***

                    // Col01: ClientName
                    this.lovClientName.SelectedValue = _Select;

                    // Row06 Col01: ContractDate
                    this.tbxContractDate.Text = String.Empty;

                    // Row07 Col02: POPStartDate
                    this.tbxPOPStartDate.Text = String.Empty;

                    // Col03: ContractModificationAggregateValue (ContractModificationTotal)
                    this.tbxContractModificationTotal.Text = String.Format("{0:C}", 0.00);

                    #endregion

                    #region *** Row07 ***

                    // Col01: ClientBusinessClassDesc
                    this.lovClientClass.SelectedValue = _Select;

                    // Col02: POPEndDate
                    //this.tbxPOPEndDate.Text = String.Format("{0:MM/dd/yy}", DateTime.Now.AddDays(30));
                    this.tbxPOPEndDate.Text = String.Empty;

                    // Col03: ContractRevisedValue
                    this.tbxContractRevisedValue.Text = String.Format("{0:C}", 0.00);

                    #endregion

                    #region *** Row08 ***

                    // Col01: OrgID
                    this.lovCompanyOrgCode.SelectedValue = _Select;

                    // Col02: AwardeeCageCode
                    this.tbxAwardeeCageCode.Text = _Select;

                    // Col03: PODOContract
                    this.lovContractType.SelectedValue = _Select;

                    #endregion

                    #region *** Row09 ***

                    // Col01: Blank

                    // Col02: ContractType (Project Type)
                    this.lovCostType.SelectedValue = _Select;

                    // Col03: Blank

                    #endregion

                    #region *** Row10 ***

                    // Col01: BondsRequired
                    this.cbxBondsRequired.Checked = false;

                    // Col02: LiquidatedDamages
                    this.cbxLiquidatedDamages.Checked = false;

                    // Col03: ServiceContractAct
                    this.cbxServiceContractAct.Checked = false;

                    #endregion

                    #region *** Row11 ***

                    // Col01: DavisBacon
                    this.cbxDavisBacon.Checked = false;

                    // Col02: NotificationFundsExpended
                    this.cbxNotificationFundsExpended.Checked = false;

                    // Col03: TINA
                    this.cbxTINA.Checked = false;

                    #endregion

                    #region *** Row12 ***

                    // Col01: EVerify
                    this.cbxEVerify.Checked = false;

                    // Col02: RecoveryActReporting
                    this.cbxRecoveryActReporting.Checked = false;

                    // Col03: Blank

                    #endregion

                    #region *** Row13 ***

                    // Col01: FFATAReporting
                    this.cbxFFATAReporting.Checked = false;

                    // Col02: RetainageWithholding
                    this.cbxRetainageWithholding.Checked = false;

                    // Col03: Blank

                    #endregion

                    #region *** Row14 ***

                    // Col01: ClientContactInfo (Customer)
                    this.tbxClientContactInfo.Text = String.Empty;

                    // Col02: ClientCertifiedPayrollContactInfo
                    this.tbxClientCertifiedPayrollContactInfo.Text = String.Empty;

                    // Col03: ClientCPSubmissionInstructions
                    this.tbxClientCPSubmissionInstructions.Text = String.Empty;

                    #endregion

                    #region *** Row15 ***

                    // Col01: ClientTechnicalContactInfo
                    this.tbxClientTechnicalContactInfo.Text = String.Empty;

                    // Col02: Blank

                    // Col03: Comments
                    this.tbxComments.Text = String.Empty;

                    #endregion

                    // Associate Add/Edit Hyperlinks
                    AssociateCertifiedPayrollSpecialist();
                    AssociateClientCertifiedPayrollContact();
                    AssociateClientContact();
                    AssociateClientName();
                    AssociateClientTechnicalContact();
                    AssociateCompanyLocation();
                    AssociateCompanyOrgCode();
                    AssociateDaysRemaining();
                    AssociateJobNumber();
                    AssociateProgramManagerID();
                    AssociateContractRevisedValueInWords();
                    AssociateWageDetermination();
                    AssociateWorkLocationID();

                    // Filters
                    if (Session["Filters"] == null)
                        Session["Filters"] = _Tab01Filters.ExecutedOpen;

                    // Display Tab01
                    Session["TabID"] = _TabID.Tab01.ToString();
                    this.panTab01.Visible = true;
                    this.panTab02.Visible = false;
                    this.panTab03.Visible = false;
                    this.panTab04.Visible = false;
                    this.lbtnTab01.Attributes.Add("class", "selectedTab");
                    this.lbtnTab01.ForeColor = Color.White;
                    ViewState["SortColumn"] = _Tab01SortColumn.ContractModNo;
                    ViewState["SortDirection"] = Constants._Ascending;
                    DisplayTab01();
                }
            }
            catch (Exception ex)
            {
                LogTheError(_TableName, _Operation, String.Empty, ex);
                SPUtility.TransferToErrorPage("During " + _ModuleClassName + _Operation + ", an error occurred.");
            }
        }

        #endregion

        #region DisplayTab01

        protected void DisplayTab01()
        {
            // ContractModificationData
            _TableName = "n/a";
            _Operation = ".DisplayTab01()";
            try
            {
                using (SDBBEDAO _SDBBEDAO = new SDBBEDAO())
                {
                    String _Filters = GetFilters();

                    if (Session["ContractModificationID"] == null)
                        Session["ContractModificationID"] = String.Empty;

                    Int32 _PrimeID = 0;
                    Int32.TryParse(Page.Request.QueryString["PrimeID"].ToString(), out _PrimeID);
                    pgsource.DataSource = _SDBBEDAO.SelectIList_ContractModificationDatas_ByPrimeID(_PrimeID,
                                                                                                        ViewState["SortColumn"].ToString(),
                                                                                                        ViewState["SortDirection"].ToString(),
                                                                                                        _Filters);
                    pgsource.AllowPaging = true;

                    if (this.lovTab01PageIndex.SelectedIndex == -1 || this.lovTab01PageIndex.SelectedIndex == 0)
                    {
                        pgsource.PageSize = _TabsMaxPageSize;
                    }
                    else
                    {
                        if (this.lovTab01PageIndex.SelectedItem.Value == "--Select All--")
                            pgsource.PageSize = _TabsMaxPageSize;
                        else
                            pgsource.PageSize = Convert.ToInt32(this.lovTab01PageIndex.SelectedItem.Value);
                    }

                    pgsource.CurrentPageIndex = CurrentPage;

                    ViewState["totpage"] = pgsource.PageCount;

                    this.lblTab01PageSize.Text = "Page " + (CurrentPage + 1) + " of " + pgsource.PageCount;

                    btnTab01Previous.Visible = !pgsource.IsFirstPage;
                    btnTab01Next.Visible = !pgsource.IsLastPage;
                    btnTab01First.Visible = !pgsource.IsFirstPage;
                    btnTab01Last.Visible = !pgsource.IsLastPage;

                    this.dlContractModificationData.DataSource = pgsource;
                    this.dlContractModificationData.DataBind();

                    // http://hazaa.com.au/blog/closing-sharepoint-2010-wait-dialog-with-javascript/
                    // http://bernado-nguyen-hoan.com/2012/04/23/how-to-close-sharepoint-modal-wait-screen-after-postback-when-page-is-in-dialog-mode/
                    // OnClientClick="javascript:myShowWaitScreenWithNoClose('Loading Modifications', 'Please wait ...', 76, 330);"
                    // OnClientClick="javascript:myShowWaitScreenWithNoClose('Loading Wage Determinations', 'Please wait ...', 76, 330);"
                    // OnClientClick="javascript:myShowWaitScreenWithNoClose('Loading Subcontracts', 'Please wait ...', 76, 330);"
                    // OnClientClick="javascript:myShowWaitScreenWithNoClose('Loading Update Log', 'Please wait ...', 76, 330);"
                    // OnClientClick="javascript:myShowWaitScreenWithNoClose('Loading Flowdown Clauses', 'Please wait ...', 76, 330);"
                    // this line does not work Response.Write("<script language='javascript'>window.parent.waitDialog.close();</script>");
                }
            }
            catch (Exception ex)
            {
                LogTheError(_TableName, _Operation, String.Empty, ex);
                SPUtility.TransferToErrorPage("During " + _ModuleClassName + _Operation + ", an error occurred.");
            }
        }

        #endregion

        #region DisplayTab02

        protected void DisplayTab02()
        {
            // subview_PrimeContractData_AssignWageDeterminationData_ListWageDetData
            _TableName = "n/a";
            _Operation = ".DisplayTab02()";
            try
            {
                using (SDBBEDAO _SDBBEDAO = new SDBBEDAO())
                {
                    Int32 _PrimeID = 0;
                    Int32.TryParse(Page.Request.QueryString["PrimeID"].ToString(), out _PrimeID);

                    pgsource.DataSource = _SDBBEDAO.SelectIList_AssignWageDeterminationDatas_ByPrimeID(_PrimeID);
                    pgsource.AllowPaging = true;

                    if (this.lovTab02PageIndex.SelectedIndex == -1 || this.lovTab02PageIndex.SelectedIndex == 0)
                    {
                        pgsource.PageSize = _TabsMaxPageSize;
                    }
                    else
                    {
                        if (this.lovTab02PageIndex.SelectedItem.Value == "--Select All--")
                            pgsource.PageSize = _TabsMaxPageSize;
                        else
                            pgsource.PageSize = Convert.ToInt32(lovTab02PageIndex.SelectedItem.Value);
                    }

                    pgsource.CurrentPageIndex = CurrentPage;

                    ViewState["totpage"] = pgsource.PageCount;

                    this.lblTab02PageSize.Text = "Page " + (CurrentPage + 1) + " of " + pgsource.PageCount;
                    //this.lovTab02PageIndex.Visible = !pgsource.IsFirstPage;
                    this.btnTab02Previous.Visible = !pgsource.IsFirstPage;
                    this.btnTab02Next.Visible = !pgsource.IsLastPage;
                    this.btnTab02First.Visible = !pgsource.IsFirstPage;
                    this.btnTab02Last.Visible = !pgsource.IsLastPage;

                    this.dlWageDeterminations.DataSource = pgsource;
                    this.dlWageDeterminations.DataBind();
                }
            }
            catch (Exception ex)
            {
                LogTheError(_TableName, _Operation, String.Empty, ex);
                SPUtility.TransferToErrorPage("During " + _ModuleClassName + _Operation + ", an error occurred.");
            }
        }

        #endregion

        #region DisplayTab03

        protected void DisplayTab03()
        {
            _TableName = "n/a";
            _Operation = ".DisplayTab03()";
            try
            {
                using (SDBBEDAO _SDBBEDAO = new SDBBEDAO())
                {
                    // SubcontractData

                    String _Filters = GetFilters();

                    if (Session["SubcontractID"] == null)
                        Session["SubcontractID"] = String.Empty;

                    Int32 _PrimeID = 0;
                    Int32.TryParse(Page.Request.QueryString["PrimeID"].ToString(), out _PrimeID);

                    pgsource.DataSource = _SDBBEDAO.SelectIList_SubcontractDatas_ByPrimeID(_PrimeID,
                                                                                               ViewState["SortColumn"].ToString(),
                                                                                               ViewState["SortDirection"].ToString(),
                                                                                               _Filters);

                    pgsource.AllowPaging = true;

                    if (this.lovTab03PageIndex.SelectedIndex == -1 || this.lovTab03PageIndex.SelectedIndex == 0)
                    {
                        pgsource.PageSize = _TabsMaxPageSize;
                    }
                    else
                    {
                        if (this.lovTab03PageIndex.SelectedItem.Value == "--Select All--")
                            pgsource.PageSize = _TabsMaxPageSize;
                        else
                            pgsource.PageSize = Convert.ToInt32(lovTab03PageIndex.SelectedItem.Value);
                    }

                    pgsource.CurrentPageIndex = CurrentPage;

                    ViewState["totpage"] = pgsource.PageCount;

                    this.lblTab03PageSize.Text = "Page " + (CurrentPage + 1) + " of " + pgsource.PageCount;

                    this.btnTab03Previous.Visible = !pgsource.IsFirstPage;
                    this.btnTab03Next.Visible = !pgsource.IsLastPage;
                    this.btnTab03First.Visible = !pgsource.IsFirstPage;
                    this.btnTab03Last.Visible = !pgsource.IsLastPage;

                    this.dlSubcontracts.DataSource = pgsource;
                    this.dlSubcontracts.DataBind();
                }
            }
            catch (Exception ex)
            {
                LogTheError(_TableName, _Operation, String.Empty, ex);
                SPUtility.TransferToErrorPage("During " + _ModuleClassName + _Operation + ", an error occurred.");
            }
        }

        #endregion

        #region DisplayTab04

        protected void DisplayTab04()
        {
            _TableName = "UpdateLogData";
            _Operation = ".DisplayTab04()";
            try
            {
                using (SDBBEDAO _SDBBEDAO = new SDBBEDAO())
                {
                    // UpdateLogData

                    String _Filters = GetFilters();

                    Int32 _PrimeID = 0;
                    Int32.TryParse(Page.Request.QueryString["PrimeID"].ToString(), out _PrimeID);

                    pgsource.DataSource = _SDBBEDAO.SelectIList_UpdateLogDatas_ByPrimeID(_PrimeID);

                    pgsource.AllowPaging = true;

                    if (this.lovTab04PageIndex.SelectedIndex == -1 || this.lovTab04PageIndex.SelectedIndex == 0)
                    {
                        pgsource.PageSize = _TabsMaxPageSize;
                    }
                    else
                    {
                        if (this.lovTab04PageIndex.SelectedItem.Value == "--Select All--")
                            pgsource.PageSize = _TabsMaxPageSize;
                        else
                            pgsource.PageSize = Convert.ToInt32(lovTab04PageIndex.SelectedItem.Value);
                    }

                    pgsource.CurrentPageIndex = CurrentPage;

                    ViewState["totpage"] = pgsource.PageCount;

                    this.lblTab04PageSize.Text = "Page " + (CurrentPage + 1) + " of " + pgsource.PageCount;

                    this.btnTab04Previous.Visible = !pgsource.IsFirstPage;
                    this.btnTab04Next.Visible = !pgsource.IsLastPage;
                    this.btnTab04First.Visible = !pgsource.IsFirstPage;
                    this.btnTab04Last.Visible = !pgsource.IsLastPage;

                    this.dlUpdateLog.DataSource = pgsource;
                    this.dlUpdateLog.DataBind();
                }
            }
            catch (Exception ex)
            {
                LogTheError(_TableName, _Operation, String.Empty, ex);
                SPUtility.TransferToErrorPage("During " + _ModuleClassName + _Operation + ", an error occurred.");
            }
        }

        #endregion

        #region DisplayTab05

        protected void DisplayTab05()
        {
            _TableName = "ContractFlowdownClauseData | ListClauseData";
            _Operation = ".DisplayTab05()";
            try
            {
                using (SDBBEDAO _SDBBEDAO = new SDBBEDAO())
                {

                    String _Filters = GetFilters();

                    Int32 _PrimeID = 0;
                    if (Page.Request.QueryString["PrimeID"] != null)
                        Int32.TryParse(Page.Request.QueryString["PrimeID"].ToString(), out _PrimeID);

                    // <PROXY CHECK>
                    // EXPLANATION OF FLOWDOWN CLAUSES
                    // Tables involved are: PrimeContractData, ContractFlowdownClauseData, and ListClauseData
                    // 1) ListClauseData contains all potential flowdown clauses that can be assigned to a contract.
                    // 2) ContractFlowdownClauseData contains only those ListClauseData flowdown clauses that have been assigned
                    //    to a specific contract by its PrimeID and its PrimeContractNumber. This is regardless if it is a
                    //    "Government" or "Non-Government" (e.g., "Commercial") type contract. Non-government contracts will be standalone contracts
                    //    with their own set of flowdown clauses.
                    // 3) However for "Government" type contracts:
                    // 3a) The PrimeContractNumber hierarchically ties multiple contracts together where the first contract with PODOContract="Prime Contract"
                    //     is the parent or proxy contract. And any subsequent contracts with the same PrimeContractNumber and whose PODOContract="DO" or ="TO"
                    //     will use the parent or proxy contract for its set of assigned flowdown clauses.
                    // 3b) In addition, the parent or proxy contract's CompanyLocationID will be set to ="PRM" and not its real CompanyLocationId. And any
                    //     subsequent contracts whose PrimeContractNumber is the same will have its CompanyLocationID set to its real CompanyLocationID.
                    this.lblPrimeID.Text = _PrimeID.ToString();
                    PrimeContractData _proxyItem = new PrimeContractData();
                    if ((this.lovContractType.SelectedItem.Text == "Prime Contract")
                    || (this.lovContractType.SelectedItem.Text == "DO")
                    || (this.lovContractType.SelectedItem.Text == "TO"))
                    {
                        _proxyItem = _SDBBEDAO.SelectItem_ContractFlowdownClauseProxyData_ByPrimeContractNumber(this.tbxPrimeContractNumber.Text);
                        if (_proxyItem != null)
                        {
                            _PrimeID = Convert.ToInt32(_proxyItem.PrimeID);
                        }
                        else
                        {
                            // Just log the error; don't error out form. May want to send email alert; but for now just log the error.
                            Exception ex = new Exception("The parent contract was not found for PrimeContractNumber=" + this.tbxPrimeContractNumber.Text + ". It needs to be setup.");
                            LogTheError(_TableName, _Operation, String.Empty, ex);
                        }
                    }
                    switch (this.rbnTab05ShowWhich.SelectedValue.ToString())
                    {
                        case "0":
                            {
                                // Show Assigned Only
                                pgsource.DataSource = _SDBBEDAO.SelectIList_AssignedListClauseData_ByPrimeID(_PrimeID);
                                break;
                            }
                        case "1":
                            {
                                // Show All (both Assigned and Unassigned)
                                pgsource.DataSource = _SDBBEDAO.SelectIList_AssignedAndUnassignedListClauseData_ByPrimeID(_PrimeID);
                                break;
                            }
                        case "2":
                            {
                                // Show Unassigned Only
                                pgsource.DataSource = _SDBBEDAO.SelectIList_UnassignedListClauseData_ByPrimeID(_PrimeID);
                                break;
                            }
                        default:
                            {
                                // Show Assigned Only
                                pgsource.DataSource = _SDBBEDAO.SelectIList_AssignedListClauseData_ByPrimeID(_PrimeID);
                                break;
                            }
                    }
                    this.lblProxyID.Text = _PrimeID.ToString();
                    this.lblProxyCount.Text = String.Format("{0:D1}", pgsource.Count);
                    //</PROXY CHECK>

                    pgsource.AllowPaging = true;
                    //pgsource.AllowPaging = false;                                                     // NOTE: When false and scroll set, it does not work well.

                    if (this.lovTab05PageIndex.SelectedIndex == -1 || this.lovTab05PageIndex.SelectedIndex == 0)
                    {
                        pgsource.PageSize = _TabsMaxPageSize;
                    }
                    else
                    {
                        if (this.lovTab05PageIndex.SelectedItem.Value == "--Select All--")
                            pgsource.PageSize = _TabsMaxPageSize;
                        else
                            pgsource.PageSize = Convert.ToInt32(lovTab05PageIndex.SelectedItem.Value);
                    }

                    pgsource.CurrentPageIndex = CurrentPage;

                    ViewState["totpage"] = pgsource.PageCount;

                    this.lblTab05PageSize.Text = "Page " + (CurrentPage + 1) + " of " + pgsource.PageCount;

                    this.btnTab05Previous.Visible = !pgsource.IsFirstPage;
                    this.btnTab05Next.Visible = !pgsource.IsLastPage;
                    this.btnTab05First.Visible = !pgsource.IsFirstPage;
                    this.btnTab05Last.Visible = !pgsource.IsLastPage;

                    this.dlContractFlowdownClauseData.DataSource = pgsource;
                    this.dlContractFlowdownClauseData.DataBind();
                }
            }
            catch (Exception ex)
            {
                LogTheError(_TableName, _Operation, String.Empty, ex);
                SPUtility.TransferToErrorPage("During " + _ModuleClassName + _Operation + ", an error occurred.");
            }
        }

        #endregion

        #region Tab01 Sorting and Selection

        protected void SortContractModNo(object sender, EventArgs e)
        {
            DropDownList _lov = sender as DropDownList;
            _SortDirection = Constants._Ascending;
            if (_lov != null)
            {
                _SortDirection = _lov.SelectedValue;
            }
            CurrentPage = 0;
            ViewState["SortColumn"] = _Tab01SortColumn.ContractModNo;
            ViewState["SortDirection"] = _SortDirection;
            DisplayTab01();
        }

        protected void SortContractModDesc(object sender, EventArgs e)
        {
            DropDownList _lov = sender as DropDownList;
            String _SortDirection = Constants._Ascending;
            if (_lov != null)
            {
                _SortDirection = _lov.SelectedValue;
            }
            CurrentPage = 0;
            ViewState["SortColumn"] = _Tab01SortColumn.ContractModDesc;
            ViewState["SortDirection"] = _SortDirection;
            DisplayTab01();
        }

        protected void SortContractModDate(object sender, EventArgs e)
        {
            DropDownList _lov = sender as DropDownList;
            _SortDirection = Constants._Ascending;
            if (_lov != null)
            {
                _SortDirection = _lov.SelectedValue;
            }
            CurrentPage = 0;
            ViewState["SortColumn"] = _Tab01SortColumn.ContractModDate;
            ViewState["SortDirection"] = _SortDirection;
            DisplayTab01();
        }

        protected void SortContractModNewLastModDate(object sender, EventArgs e)
        {
            DropDownList _lov = sender as DropDownList;
            _SortDirection = Constants._Ascending;
            if (_lov != null)
            {
                _SortDirection = _lov.SelectedValue;
            }
            CurrentPage = 0;
            ViewState["SortColumn"] = _Tab01SortColumn.ContractModNewEndDate;
            ViewState["SortDirection"] = _SortDirection;
            DisplayTab01();
        }

        protected void SortContractModValue(object sender, EventArgs e)
        {
            DropDownList _lov = sender as DropDownList;
            _SortDirection = Constants._Ascending;
            if (_lov != null)
            {
                _SortDirection = _lov.SelectedValue;
            }
            CurrentPage = 0;
            ViewState["SortColumn"] = _Tab01SortColumn.ContractModValue;
            ViewState["SortDirection"] = _SortDirection;
            DisplayTab01();
        }

        protected void btnTab01Refresh_OnClick(object sender, EventArgs e)
        {
            CurrentPage = 0;
            DisplayTab01();
        }

        protected void btnTab01Search_OnClick(object sender, EventArgs e)
        {
            CurrentPage = 0;
            DisplayTab01();
        }

        #endregion

        #region Tab02 Sorting and Selection

        protected void btnTab02Search_OnClick(object sender, EventArgs e)
        {
            CurrentPage = 0;
            DisplayTab02();
        }

        #endregion

        #region Tab03 Sorting and Selection

        protected void SortSubcontractNo(object sender, EventArgs e)
        {
            DropDownList _lov = sender as DropDownList;
            _SortDirection = Constants._Ascending;
            if (_lov != null)
            {
                _SortDirection = _lov.SelectedValue;
            }
            CurrentPage = 0;
            ViewState["SortColumn"] = _Tab03SortColumn.SubcontractNo;
            ViewState["SortDirection"] = _SortDirection;
            DisplayTab03();
        }

        protected void SortSubcontractorFullName(object sender, EventArgs e)
        {
            DropDownList _lov = sender as DropDownList;
            _SortDirection = Constants._Ascending;
            if (_lov != null)
            {
                _SortDirection = _lov.SelectedValue;
            }
            CurrentPage = 0;
            ViewState["SortColumn"] = _Tab03SortColumn.SubcontractorFullName;
            ViewState["SortDirection"] = _SortDirection;
            DisplayTab03();
        }

        protected void SortSubcontractTypeDesc(object sender, EventArgs e)
        {
            DropDownList _lov = sender as DropDownList;
            _SortDirection = Constants._Ascending;
            if (_lov != null)
            {
                _SortDirection = _lov.SelectedValue;
            }
            CurrentPage = 0;
            ViewState["SortColumn"] = _Tab03SortColumn.SubcontractTypeDesc;
            ViewState["SortDirection"] = _SortDirection;
            DisplayTab03();
        }

        protected void SortPOPStart(object sender, EventArgs e)
        {
            DropDownList _lov = sender as DropDownList;
            _SortDirection = Constants._Ascending;
            if (_lov != null)
            {
                _SortDirection = _lov.SelectedValue;
            }
            CurrentPage = 0;
            ViewState["SortColumn"] = _Tab03SortColumn.POPStart;
            ViewState["SortDirection"] = _SortDirection;
            DisplayTab03();
        }

        protected void SortPOPEnd(object sender, EventArgs e)
        {
            DropDownList _lov = sender as DropDownList;
            _SortDirection = Constants._Ascending;
            if (_lov != null)
            {
                _SortDirection = _lov.SelectedValue;
            }
            CurrentPage = 0;
            ViewState["SortColumn"] = _Tab03SortColumn.POPEnd;
            ViewState["SortDirection"] = _SortDirection;
            DisplayTab03();
        }

        protected void SortSubcontractStatusDesc(object sender, EventArgs e)
        {
            DropDownList _lov = sender as DropDownList;
            String _SortDirection = Constants._Ascending;
            if (_lov != null)
            {
                _SortDirection = _lov.SelectedValue;
            }
            CurrentPage = 0;
            ViewState["SortColumn"] = _Tab03SortColumn.SubcontractStatusDesc;
            ViewState["SortDirection"] = _SortDirection;
            DisplayTab03();
        }

        protected void SortSubContractValue(object sender, EventArgs e)
        {
            DropDownList _lov = sender as DropDownList;
            _SortDirection = Constants._Ascending;
            if (_lov != null)
            {
                _SortDirection = _lov.SelectedValue;
            }
            CurrentPage = 0;
            ViewState["SortColumn"] = _Tab03SortColumn.SubcontractValue;
            ViewState["SortDirection"] = _SortDirection;
            DisplayTab03();
        }

        protected void btnTab03Refresh_OnClick(object sender, EventArgs e)
        {
            CurrentPage = 0;
            DisplayTab03();
        }

        protected void btnTab03Search_OnClick(object sender, EventArgs e)
        {
            CurrentPage = 0;
            DisplayTab03();
        }

        #endregion

        #region Associate IDs for Add or Edit

        protected void AssociateCertifiedPayrollSpecialist()
        {
            this._TableName = "n/a";
            this._Operation = ".AssociateCPSpecialist()";
            try
            {
                using (DataTable _dt = new DataTable())
                {
                    DataColumn _dc01 = new DataColumn();
                    _dc01.ColumnName = "SpecialistID";
                    _dc01.DataType = Type.GetType("System.Int32");
                    _dc01.AllowDBNull = true;
                    _dt.Columns.Add(_dc01);

                    DataColumn _dc02 = new DataColumn();
                    _dc02.ColumnName = "CompanyLocationID";
                    _dc02.DataType = Type.GetType("System.String");
                    _dc02.AllowDBNull = true;
                    _dt.Columns.Add(_dc02);

                    DataRow _dr = _dt.NewRow();

                        Int32 _SpecialistID = 0;
                        String _CompanyLocationID = String.Empty;
                        if (this.lovCertifiedPayrollSpecialist.SelectedValue != _Select)
                            Int32.TryParse(this.lovCertifiedPayrollSpecialist.SelectedValue, out _SpecialistID);
                        if (this.lovCompanyLocationID.SelectedValue != _Select)
                            _CompanyLocationID = this.lovCompanyLocationID.SelectedItem.Text;           // NOTE: SelectedItem.Text not SelectedValue

                    // If Company Location not selected, disable dependent downstream control
                    if (this.lovCompanyLocationID.SelectedValue == _Select)
                    {
                        this.lovCertifiedPayrollSpecialist.Enabled = false;
                        this.divCPSpecialistAdd.Visible = false;
                        this.divCPSpecialistEdit.Visible = false;
                    }
                    else
                    {
                        this.lovCertifiedPayrollSpecialist.Enabled = true;
                        _dr["SpecialistID"] = _SpecialistID;
                        _dr["CompanyLocationID"] = _CompanyLocationID;
                        if (this.lovCertifiedPayrollSpecialist.SelectedValue != _Select)
                        {
                            this.divCPSpecialistAdd.Visible = false;
                            this.divCPSpecialistEdit.Visible = true;
                            _dt.Rows.Add(_dr);
                            this.dlCPSpecialistEdit.DataSource = _dt;
                            this.dlCPSpecialistEdit.DataBind();
                        }
                        else
                        {
                            this.divCPSpecialistAdd.Visible = true;
                            this.divCPSpecialistEdit.Visible = false;
                            _dt.Rows.Add(_dr);
                            this.dlCPSpecialistAdd.DataSource = _dt;
                            this.dlCPSpecialistAdd.DataBind();
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                LogTheError(_TableName, _Operation, String.Empty, ex);
                SPUtility.TransferToErrorPage("During " + _ModuleClassName + _Operation + ", an error occurred.");
            }
        }

        protected void AssociateClientCertifiedPayrollContact()
        {
            this._TableName = "n/a";
            this._Operation = ".AssociateClientCertifiedPayrollContact()";
            try
            {
                using (DataTable _dt = new DataTable())
                {
                    DataColumn _dc01 = new DataColumn();
                    _dc01.ColumnName = "ClientContactID";
                    _dc01.DataType = Type.GetType("System.Int32");
                    _dc01.AllowDBNull = true;
                    _dt.Columns.Add(_dc01);

                    DataColumn _dc02 = new DataColumn();
                    _dc02.ColumnName = "PrimeID";
                    _dc02.DataType = Type.GetType("System.Int32");
                    _dc02.AllowDBNull = true;
                    _dt.Columns.Add(_dc02);

                    DataColumn _dc03 = new DataColumn();
                    _dc03.ColumnName = "ClientID";
                    _dc03.DataType = Type.GetType("System.Int32");
                    _dc03.AllowDBNull = true;
                    _dt.Columns.Add(_dc03);

                    DataRow _dr = _dt.NewRow();

                    Int32 _ClientContactID = 0;
                    Int32 _PrimeID = 0;
                    Int32 _ClientID = 0;
                    if (this.Page.Request.QueryString["Mode"] == "Update")
                    {
                        Int32.TryParse(this.tbxClientContactIDCPAdministrator.Text, out _ClientContactID);
                        Int32.TryParse(Page.Request.QueryString["PrimeID"].ToString(), out _PrimeID);
                        Int32.TryParse(this.lovClientName.SelectedValue, out _ClientID);
                    }
                    _dr["ClientContactID"] = _ClientContactID;
                    _dr["PrimeID"] = _PrimeID;
                    _dr["ClientID"] = _ClientID;
                    if (_ClientContactID != 0)
                    {
                        this.divClientCertifiedPayrollContactAdd.Visible = false;
                        this.divClientCertifiedPayrollContactEdit.Visible = true;
                        _dt.Rows.Add(_dr);
                        this.dlClientCertifiedPayrollContactEdit.DataSource = _dt;
                        this.dlClientCertifiedPayrollContactEdit.DataBind();
                    }
                    else
                    {
                        this.divClientCertifiedPayrollContactAdd.Visible = true;
                        this.divClientCertifiedPayrollContactEdit.Visible = false;
                        _dt.Rows.Add(_dr);
                        this.dlClientCertifiedPayrollContactAdd.DataSource = _dt;
                        this.dlClientCertifiedPayrollContactAdd.DataBind();
                    }
                }
            }
            catch (Exception ex)
            {
                LogTheError(_TableName, _Operation, String.Empty, ex);
                SPUtility.TransferToErrorPage("During " + _ModuleClassName + _Operation + ", an error occurred.");
            }
        }

        protected void AssociateClientContact()
        {
            this._TableName = "n/a";
            this._Operation = ".AssociateClientContact()";
            try
            {
                using (DataTable _dt = new DataTable())
                {
                    DataColumn _dc01 = new DataColumn();
                    _dc01.ColumnName = "ClientContactID";
                    _dc01.DataType = Type.GetType("System.Int32");
                    _dc01.AllowDBNull = true;
                    _dt.Columns.Add(_dc01);

                    DataColumn _dc02 = new DataColumn();
                    _dc02.ColumnName = "PrimeID";
                    _dc02.DataType = Type.GetType("System.Int32");
                    _dc02.AllowDBNull = true;
                    _dt.Columns.Add(_dc02);

                    DataColumn _dc03 = new DataColumn();
                    _dc03.ColumnName = "ClientID";
                    _dc03.DataType = Type.GetType("System.Int32");
                    _dc03.AllowDBNull = true;
                    _dt.Columns.Add(_dc03);

                    DataRow _dr = _dt.NewRow();

                    Int32 _ClientContactID = 0;
                    Int32 _PrimeID = 0;
                    Int32 _ClientID = 0;

                    Int32.TryParse(this.tbxClientContactIDContractAdministrator.Text, out _ClientContactID);
                    Int32.TryParse(Page.Request.QueryString["PrimeID"].ToString(), out _PrimeID);
                    if (this.lovClientName.SelectedValue != _Select)
                        Int32.TryParse(this.lovClientName.SelectedValue, out _ClientID);

                    _dr["ClientContactID"] = _ClientContactID;
                    _dr["PrimeID"] = _PrimeID;
                    _dr["ClientID"] = _ClientID;
                    if (_ClientContactID != 0)
                    {
                        this.divClientContactAdd.Visible = false;
                        this.divClientContactEdit.Visible = true;
                        _dt.Rows.Add(_dr);
                        this.dlClientContactEdit.DataSource = _dt;
                        this.dlClientContactEdit.DataBind();
                    }
                    else
                    {
                        this.divClientContactAdd.Visible = true;
                        this.divClientContactEdit.Visible = false;
                        _dt.Rows.Add(_dr);
                        this.dlClientContactAdd.DataSource = _dt;
                        this.dlClientContactAdd.DataBind();
                    }
                }
            }
            catch (Exception ex)
            {
                LogTheError(_TableName, _Operation, String.Empty, ex);
                SPUtility.TransferToErrorPage("During " + _ModuleClassName + _Operation + ", an error occurred.");
            }
        }

        protected void AssociateClientName()
        {
            this._TableName = "n/a";
            this._Operation = ".AssociateClientName()";
            try
            {
                using (DataTable _dt = new DataTable())
                {
                    DataColumn _dc01 = new DataColumn();
                    _dc01.ColumnName = "ClientID";
                    _dc01.DataType = Type.GetType("System.Int32");
                    _dc01.AllowDBNull = true;
                    _dt.Columns.Add(_dc01);

                    DataColumn _dc02 = new DataColumn();
                    _dc02.ColumnName = "ClientContactID";
                    _dc02.DataType = Type.GetType("System.Int32");
                    _dc02.AllowDBNull = true;
                    _dt.Columns.Add(_dc02);

                    DataColumn _dc03 = new DataColumn();
                    _dc03.ColumnName = "PrimeID";
                    _dc03.DataType = Type.GetType("System.Int32");
                    _dc03.AllowDBNull = true;
                    _dt.Columns.Add(_dc03);

                    DataRow _dr = _dt.NewRow();

                    Int32 _ClientID = 0;
                    Int32 _ClientContactID = 0;
                    Int32 _PrimeID = 0;

                    Int32.TryParse(tbxClientContactIDContractAdministrator.Text, out _ClientContactID);
                    Int32.TryParse(Page.Request.QueryString["PrimeID"].ToString(), out _PrimeID);

                    if (this.Page.Request.QueryString["Mode"] == "Update")
                    {
                        if (this.lovClientName.SelectedValue != _Select)
                            Int32.TryParse(this.lovClientName.SelectedValue, out _ClientID);
                    }
                    _dr["ClientID"] = _ClientID;
                    _dr["ClientContactID"] = _ClientContactID;
                    _dr["PrimeID"] = _PrimeID;

                    if (_ClientContactID != 0)
                    {
                        this.divClientNameAdd.Visible = false;
                        this.divClientNameEdit.Visible = true;
                        _dt.Rows.Add(_dr);
                        this.dlClientNameEdit.DataSource = _dt;
                        this.dlClientNameEdit.DataBind();

                        //this.divClientCertifiedPayrollContactAdd.Visible = false;
                        //this.divClientCertifiedPayrollContactEdit.Visible = true;
                        //this.divClientTechnicalContactAdd.Visible = false;
                        //this.divClientTechnicalContactEdit.Visible = true;
                    }
                    else
                    {
                        this.divClientNameAdd.Visible = true;
                        this.divClientNameEdit.Visible = false;
                        _dt.Rows.Add(_dr);
                        this.dlClientNameAdd.DataSource = _dt;
                        this.dlClientNameAdd.DataBind();

                        //this.divClientContactAdd.Visible = true;
                        //this.divClientContactEdit.Visible = false;
                        //this.divClientCertifiedPayrollContactAdd.Visible = true;
                        //this.divClientCertifiedPayrollContactEdit.Visible = false;
                        //this.divClientTechnicalContactAdd.Visible = true;
                        //this.divClientTechnicalContactEdit.Visible = false;
                    }
                }
            }
            catch (Exception ex)
            {
                LogTheError(_TableName, _Operation, String.Empty, ex);
                SPUtility.TransferToErrorPage("During " + _ModuleClassName + _Operation + ", an error occurred.");
            }
        }

        protected void AssociateClientTechnicalContact()
        {
            this._TableName = "n/a";
            this._Operation = ".AssociateClientTechnicalContact()";
            try
            {
                using (DataTable _dt = new DataTable())
                {
                    DataColumn _dc01 = new DataColumn();
                    _dc01.ColumnName = "ClientID";
                    _dc01.DataType = Type.GetType("System.Int32");
                    _dc01.AllowDBNull = true;
                    _dt.Columns.Add(_dc01);

                    DataColumn _dc02 = new DataColumn();
                    _dc02.ColumnName = "ClientContactID";
                    _dc02.DataType = Type.GetType("System.Int32");
                    _dc02.AllowDBNull = true;
                    _dt.Columns.Add(_dc02);

                    DataColumn _dc03 = new DataColumn();
                    _dc03.ColumnName = "PrimeID";
                    _dc03.DataType = Type.GetType("System.Int32");
                    _dc03.AllowDBNull = true;
                    _dt.Columns.Add(_dc03);

                    DataRow _dr = _dt.NewRow();

                    Int32 _ClientID = 0;
                    Int32 _ClientContactID = 0;
                    Int32 _PrimeID = 0;

                    Int32.TryParse(tbxClientContactIDTechnicalAdministrator.Text, out _ClientContactID);
                    Int32.TryParse(Page.Request.QueryString["PrimeID"].ToString(), out _PrimeID);

                    if (this.Page.Request.QueryString["Mode"] == "Update")
                    {
                        if (this.lovClientName.SelectedValue != _Select)
                            Int32.TryParse(this.lovClientName.SelectedValue, out _ClientID);
                    }
                    _dr["ClientID"] = _ClientID;
                    _dr["ClientContactID"] = _ClientContactID;
                    _dr["PrimeID"] = _PrimeID;

                    if (_ClientContactID != 0)
                    {
                        this.divClientTechnicalContactAdd.Visible = false;
                        this.divClientTechnicalContactEdit.Visible = true;
                        _dt.Rows.Add(_dr);
                        this.dlClientTechnicalContactEdit.DataSource = _dt;
                        this.dlClientTechnicalContactEdit.DataBind();
                    }
                    else
                    {
                        this.divClientTechnicalContactAdd.Visible = true;
                        this.divClientTechnicalContactEdit.Visible = false;
                        _dt.Rows.Add(_dr);
                        this.dlClientTechnicalContactAdd.DataSource = _dt;
                        this.dlClientTechnicalContactAdd.DataBind();
                    }
                }
            }
            catch (Exception ex)
            {
                LogTheError(_TableName, _Operation, String.Empty, ex);
                SPUtility.TransferToErrorPage("During " + _ModuleClassName + _Operation + ", an error occurred.");
            }
        }

        protected void AssociateCompanyLocation()
        {
            this._TableName = "n/a";
            this._Operation = ".AssociateCompanyLocation()";
            try
            {
                using (DataTable _dt = new DataTable())
                {
                    DataColumn _dc01 = new DataColumn();
                    _dc01.ColumnName = "CompanyLocationID";
                    _dc01.DataType = Type.GetType("System.String");                                 // NOTE: System.String not System.Int32!!!
                    _dc01.AllowDBNull = true;
                    _dt.Columns.Add(_dc01);

                    DataColumn _dc02 = new DataColumn();
                    _dc02.ColumnName = "CompanyLocationDesc";
                    _dc02.DataType = Type.GetType("System.String");
                    _dc02.AllowDBNull = true;
                    _dt.Columns.Add(_dc02);

                    DataRow _dr = _dt.NewRow();

                    String _CompanyLocationID = String.Empty;
                    if (this.lovCompanyLocationID.SelectedValue != _Select) 
                        _CompanyLocationID = this.lovCompanyLocationID.SelectedItem.Text;           // NOTE: SelectedItem.Text not SelectedItem

                    _dr["CompanyLocationID"] = _CompanyLocationID;
                    if (_CompanyLocationID != String.Empty)
                    {
                        this.divCompanyLocationAdd.Visible = false;
                        this.divCompanyLocationEdit.Visible = true;
                        _dt.Rows.Add(_dr);
                        this.dlCompanyLocationEdit.DataSource = _dt;
                        this.dlCompanyLocationEdit.DataBind();
                    }
                    else
                    {
                        this.divCompanyLocationAdd.Visible = true;
                        this.divCompanyLocationEdit.Visible = false;
                        _dt.Rows.Add(_dr);
                        this.dlCompanyLocationAdd.DataSource = _dt;
                        this.dlCompanyLocationAdd.DataBind();
                    }
                }
            }
            catch (Exception ex)
            {
                LogTheError(_TableName, _Operation, String.Empty, ex);
                SPUtility.TransferToErrorPage("During " + _ModuleClassName + _Operation + ", an error occurred.");
            }
        }

        protected void AssociateCompanyOrgCode()
        {
            this._TableName = "n/a";
            this._Operation = ".AssociateCompanyOrgCode()";
            try
            {
                using (DataTable _dt = new DataTable())
                {
                    DataColumn _dc01 = new DataColumn();
                    _dc01.ColumnName = "AwardeeID";
                    _dc01.DataType = Type.GetType("System.String");                                 // NOTE: System.String not System.Int32!!!
                    _dc01.AllowDBNull = true;
                    _dt.Columns.Add(_dc01);

                    DataColumn _dc02 = new DataColumn();
                    _dc02.ColumnName = "AwardeeLOVName";
                    _dc02.DataType = Type.GetType("System.String");
                    _dc02.AllowDBNull = true;
                    _dt.Columns.Add(_dc02);

                    DataRow _dr = _dt.NewRow();

                    String _AwardeeID = String.Empty;
                    if (this.lovCompanyOrgCode.SelectedValue != _Select)
                        _AwardeeID = this.lovCompanyOrgCode.SelectedValue;

                    _dr["AwardeeID"] = _AwardeeID;
                    if (this.lovCompanyOrgCode.SelectedValue != _Select)
                    {
                        this.divCompanyOrgCodeAdd.Visible = false;
                        this.divCompanyOrgCodeEdit.Visible = true;
                        _dt.Rows.Add(_dr);
                        this.dlCompanyOrgCodeEdit.DataSource = _dt;
                        this.dlCompanyOrgCodeEdit.DataBind();
                    }
                    else
                    {
                        this.divCompanyOrgCodeAdd.Visible = true;
                        this.divCompanyOrgCodeEdit.Visible = false;
                        _dt.Rows.Add(_dr);
                        this.dlCompanyOrgCodeAdd.DataSource = _dt;
                        this.dlCompanyOrgCodeAdd.DataBind();
                    }
                }
            }
            catch (Exception ex)
            {
                LogTheError(_TableName, _Operation, String.Empty, ex);
                SPUtility.TransferToErrorPage("During " + _ModuleClassName + _Operation + ", an error occurred.");
            }
        }

        protected void AssociateContractRevisedValue()
        {
            // Needs to query database for any modifications adding any to ContractOriginalValue.   // FIX!!! 
            // But for now just add to ContractOriginalValue
            Decimal _ContractOriginalValue = new Decimal();
            _ContractOriginalValue = 0;
            String _strContractOriginalValue = this.tbxContractOriginalValue.Text.Replace(",", String.Empty).Replace("$", String.Empty);
            Decimal.TryParse(_strContractOriginalValue, out _ContractOriginalValue);
            this.tbxContractRevisedValue.Text = String.Format("{0:C}", _ContractOriginalValue);
        }

        protected void AssociateContractRevisedValueInWords()
        {
            if (this.tbxContractRevisedValue.Text != String.Empty)
            {
                String _strContractRevisedValue = this.tbxContractRevisedValue.Text.Replace(",", String.Empty).Replace("$", String.Empty);
                Decimal _decContractRevisedValue = new Decimal();
                _decContractRevisedValue = 0;
                Decimal.TryParse(_strContractRevisedValue, out _decContractRevisedValue);
                MoneyValueToWords _wordsContractRevisedValue = new MoneyValueToWords(_strContractRevisedValue);
                this.tbxContractRevisedValueWords.Text = _wordsContractRevisedValue.TextCurrency;
            }
            else
                this.tbxContractRevisedValueWords.Text = String.Empty;
        }

        protected void AssociateDaysRemaining()
        {
            //The POP Days Remain field is in Client Contract Modifications "block", and has the following Control Source: =DateDiff("d",Date(),[EndDate])
            //=IIf([Text94]>0,[Text94],"POP Expired") //Text94 is the name of the first field.

            this._TableName = "n/a";
            this._Operation = ".AssociateDaysRemaining()";
            try

            {
                Int32 _DaysRemaining = 0;
                if (this.tbxPOPEndDate.Text != String.Empty)
                {
                    DateTime _dtPOPEndDate = Convert.ToDateTime(this.tbxPOPEndDate.Text);
                    TimeSpan _tsDaysRemaining = (TimeSpan)(_dtPOPEndDate - DateTime.Now);
                    if (_tsDaysRemaining.Days > 0)
                    {
                        _DaysRemaining = _tsDaysRemaining.Days;
                    }
                }
                this.tbxDaysRemaining.Text = _DaysRemaining.ToString();
            }
            catch (Exception ex)
            {
                LogTheError(_TableName, _Operation, String.Empty, ex);
                SPUtility.TransferToErrorPage("During " + _ModuleClassName + _Operation + ", an error occurred.");
            }
        }

        protected void AssociateJobNumber()
        {
            this._TableName = "n/a";
            this._Operation = ".AssociateJobNumber()";
            try
            {
                using (DataTable _dt = new DataTable())
                {
                    DataColumn _dc01 = new DataColumn();
                    _dc01.ColumnName = "JobNumber";
                    _dc01.DataType = Type.GetType("System.String");                                 // NOTE: String not Int32
                    _dc01.AllowDBNull = true;
                    _dt.Columns.Add(_dc01);

                    DataColumn _dc02 = new DataColumn();
                    _dc02.ColumnName = "CompanyLocationID";
                    _dc02.DataType = Type.GetType("System.String");
                    _dc02.AllowDBNull = true;
                    _dt.Columns.Add(_dc02);

                    DataRow _dr = _dt.NewRow();

                    String _JobNumber = String.Empty;
                    if (this.lovJobNumber.SelectedValue != _Select)
                        _JobNumber = this.lovJobNumber.SelectedValue;
 
                    String _CompanyLocationID = String.Empty;
                    if (this.lovCompanyLocationID.SelectedValue != _Select)
                        _CompanyLocationID = this.lovCompanyLocationID.SelectedItem.Text;           // NOTE: SelectedItem.Text not SelectedValue

                    // If Company Location not selected, disable dependent downstream control
                    if (this.lovCompanyLocationID.SelectedValue == _Select)
                    {
                        this.lovJobNumber.Enabled = false;
                        this.divJobNumberAdd.Visible = false;
                        this.divJobNumberEdit.Visible = false;
                    }
                    else
                    {
                        this.lovJobNumber.Enabled = true;
                        _dr["JobNumber"] = _JobNumber;
                        _dr["CompanyLocationID"] = _CompanyLocationID;
                        if (this.lovJobNumber.SelectedValue != _Select)
                        {
                            this.divJobNumberAdd.Visible = false;
                            this.divJobNumberEdit.Visible = true;
                            _dt.Rows.Add(_dr);
                            this.dlJobNumberEdit.DataSource = _dt;
                            this.dlJobNumberEdit.DataBind();
                        }
                        else
                        {
                            this.divJobNumberAdd.Visible = true;
                            this.divJobNumberEdit.Visible = false;
                            _dt.Rows.Add(_dr);
                            this.dlJobNumberAdd.DataSource = _dt;
                            this.dlJobNumberAdd.DataBind();
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                LogTheError(_TableName, _Operation, String.Empty, ex);
                SPUtility.TransferToErrorPage("During " + _ModuleClassName + _Operation + ", an error occurred.");
            }
        }

        protected void AssociateProgramManagerID()
        {
            this._TableName = "n/a";
            this._Operation = ".AssociateProgramManagerID()";
            try
            {
                using (DataTable _dt = new DataTable())
                {
                    DataColumn _dc01 = new DataColumn();
                    _dc01.ColumnName = "SpecialistID";
                    _dc01.DataType = Type.GetType("System.Int32");
                    _dc01.AllowDBNull = true;
                    _dt.Columns.Add(_dc01);

                    DataColumn _dc02 = new DataColumn();
                    _dc02.ColumnName = "CompanyLocationID";
                    _dc02.DataType = Type.GetType("System.String");
                    _dc02.AllowDBNull = true;
                    _dt.Columns.Add(_dc02);

                    DataRow _dr = _dt.NewRow();

                    Int32 _SpecialistID = 0;
                    if (this.lovProgramManager.SelectedValue != _Select)
                        Int32.TryParse(this.lovProgramManager.SelectedValue, out _SpecialistID);

                    String _CompanyLocationID = String.Empty;
                    if (this.lovCompanyLocationID.SelectedValue != _Select)
                        _CompanyLocationID = this.lovCompanyLocationID.SelectedItem.Text;           // NOTE: SelectedItem.Text not SelectedValue

                    // If Company Location not selected, disable dependent downstream control
                    if (this.lovCompanyLocationID.SelectedValue == _Select)
                    {
                        this.lovProgramManager.Enabled = false;
                        this.divProgramManagerAdd.Visible = false;
                        this.divProgramManagerEdit.Visible = false;
                    }
                    else
                    {
                        this.lovProgramManager.Enabled = true;
                        _dr["SpecialistID"] = _SpecialistID;
                        _dr["CompanyLocationID"] = _CompanyLocationID;
                        if (this.lovProgramManager.SelectedValue != _Select)
                        {
                            this.divProgramManagerAdd.Visible = false;
                            this.divProgramManagerEdit.Visible = true;
                            _dt.Rows.Add(_dr);
                            this.dlProgramManagerEdit.DataSource = _dt;
                            this.dlProgramManagerEdit.DataBind();
                        }
                        else
                        {
                            this.divProgramManagerAdd.Visible = true;
                            this.divProgramManagerEdit.Visible = false;
                            _dt.Rows.Add(_dr);
                            this.dlProgramManagerAdd.DataSource = _dt;
                            this.dlProgramManagerAdd.DataBind();
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                LogTheError(_TableName, _Operation, String.Empty, ex);
                SPUtility.TransferToErrorPage("During " + _ModuleClassName + _Operation + ", an error occurred.");
            }
        }

        protected void AssociateOrgID()
        {
            this._TableName = "n/a";
            this._Operation = ".AssociateOrgID()";
            try
            {
                using (DataTable _dt = new DataTable())
                {
                    DataColumn _dc01 = new DataColumn();
                    _dc01.ColumnName = "AwardeeID";
                    _dc01.DataType = Type.GetType("System.String");                                 // NOTE: Not Int32!
                    _dc01.AllowDBNull = true;
                    _dt.Columns.Add(_dc01);

                    DataRow _dr = _dt.NewRow();

                    String _AwardeeID = String.Empty;
                        if (this.lovCompanyOrgCode.SelectedValue != _Select)
                            _AwardeeID = this.lovCompanyOrgCode.SelectedValue;

                    _dr["AwardeeID"] = _AwardeeID;
                    if (this.lovCompanyOrgCode.SelectedValue != _Select)
                    {
                        this.divCompanyOrgCodeAdd.Visible = false;
                        this.divCompanyOrgCodeEdit.Visible = true;
                        _dt.Rows.Add(_dr);
                        this.dlCompanyOrgCodeEdit.DataSource = _dt;
                        this.dlCompanyOrgCodeEdit.DataBind();
                    }
                    else
                    {
                        this.divCompanyOrgCodeAdd.Visible = true;
                        this.divCompanyOrgCodeEdit.Visible = false;
                        _dt.Rows.Add(_dr);
                        this.dlCompanyOrgCodeAdd.DataSource = _dt;
                        this.dlCompanyOrgCodeAdd.DataBind();
                    }
                }
            }
            catch (Exception ex)
            {
                LogTheError(_TableName, _Operation, String.Empty, ex);
                SPUtility.TransferToErrorPage("During " + _ModuleClassName + _Operation + ", an error occurred.");
            }
        }

        protected void AssociateWorkLocationID()
        {
            this._TableName = "n/a";
            this._Operation = ".AssociateWorkLocationID()";
            try
            {
                using (DataTable _dt = new DataTable())
                {
                    DataColumn _dc01 = new DataColumn();
                    _dc01.ColumnName = "WorkLocationID";
                    _dc01.DataType = Type.GetType("System.Int32");
                    _dc01.AllowDBNull = true;
                    _dt.Columns.Add(_dc01);

                    DataRow _dr = _dt.NewRow();

                    Int32 _WorkLocationID = 0;
                        if (this.lovWorkLocation.SelectedValue != _Select)
                             Int32.TryParse(this.lovWorkLocation.SelectedValue, out _WorkLocationID);

                    _dr["WorkLocationID"] = _WorkLocationID;
                    if (_WorkLocationID != 0)
                    {
                        this.divWorkLocationAdd.Visible = false;
                        this.divWorkLocationEdit.Visible = true;
                        _dt.Rows.Add(_dr);
                        this.dlWorkLocationEdit.DataSource = _dt;
                        this.dlWorkLocationEdit.DataBind();
                    }
                    else
                    {
                        this.divWorkLocationAdd.Visible = true;
                        this.divWorkLocationEdit.Visible = false;
                        _dt.Rows.Add(_dr);
                        this.dlWorkLocationAdd.DataSource = _dt;
                        this.dlWorkLocationAdd.DataBind();
                    }
                 }
            }
            catch (Exception ex)
            {
                LogTheError(_TableName, _Operation, String.Empty, ex);
                SPUtility.TransferToErrorPage("During " + _ModuleClassName + _Operation + ", an error occurred.");
            }
        }

        protected void FillInWageDetermination()
        {
            AssignWageDeterminationData _WageDetermInfo = new AssignWageDeterminationData();
            using (SDBBEDAO _SDBBEDAO = new SDBBEDAO())
            {
                //AssignWageDeterminationID - For Insert is Auto Assigned; for Update is pulled from parameter

                //PrimeID
                Int32 _PrimeID = 0;
                Int32.TryParse(Page.Request.QueryString["PrimeID"].ToString(), out _PrimeID);
                _WageDetermInfo.PrimeID = _PrimeID;

                //DocID
                String _selectedText;
                String _docTitle = String.Empty;
                char[] separatingChars = { '|' };
                _selectedText = lovWageDetermination.SelectedItem.Text;
                string[] _selectedValues = _selectedText.Split('|');
                _docTitle = _selectedValues[0];
                ListWageDetData _ListWageData = new ListWageDetData();

                _ListWageData = _SDBBEDAO.SelectItem_ListWageDetData_ByDocTitle(_docTitle);
                _WageDetermInfo.DocID = _ListWageData.DocID;


                _SDBBEDAO.SaveItem_AssignWageDeterminationData(_WageDetermInfo);
                DisplayTab02();

            }

        }


        protected void AssociateWageDetermination()
        {
            // TBD
        }

        #endregion


        #region CreateJobSite

        protected void CreateJobSite(PrimeContractData _pNewItem)
        {
            String _JobNumber = _pNewItem.JobNumber;
            String _JobName = String.Empty;
            String _JobUrl = String.Empty;
            String _WebUrl = String.Empty;
            String _TemplateName = String.Empty;
            String _TableName = "n/a";
            String _Operation = "CreateJobSite()";
            try
            {
                // NOTE 30-Apr-2014 dpb: When making data-driven, this will need to be changed.
                _JobSiteType = (JobType)Enum.Parse(typeof(JobType), _pNewItem.CompanyLocationID);
                _TemplateName = GetWebTemplateNameForSite(_JobSiteType);

                SPWebTemplate template = SPContext.Current.Site.FindWebTemplate(_TemplateName);

                if (template != null)
                {
                    // Populate variables
                    _JobNumber = this.lovJobNumber.SelectedValue.ToString();
                    _JobName = this.tbxJobName.Text;
                    CleanStringHelper _csh = new CleanStringHelper(_JobNumber.ToLower());
                    _JobUrl = _csh.CleanString;

                    // Now, get the same item with the elevated privileges 
                    // we have to do it that way because we do not know which level of
                    // permissions the current user has.
                    SPSecurity.RunWithElevatedPrivileges(delegate()
                    {
                        using (SPSite elevatedSite = new SPSite(SPContext.Current.Site.Url))
                        {
                            using (SPWeb elevatedWeb = elevatedSite.OpenWeb())
                            {
                                elevatedWeb.AllowUnsafeUpdates = true;

                                // Create new site
                                _WebUrl = elevatedWeb.CreateNewJobSite(_JobUrl, _JobNumber, _JobName, template.Name, _JobSiteType);

                                elevatedWeb.AllowUnsafeUpdates = false;
                            }
                        }
                    });
                }
                else
                {
                    throw new Exception("Job Site Template is missing.");
                }
            }
            catch (System.Threading.ThreadAbortException threadex)
            {
                LogTheError(_TableName, _Operation, String.Empty, threadex);
            }
            catch (Exception ex)
            {
                LogTheError(_TableName, _Operation, String.Empty, ex);
                // SPUtility.TransferToErrorPage("During " + _ModuleClassName + _Operation + ", an error occurred.");
            }
        }

        /// <summary>
        /// Determines the web template name for the passed in site type.
        /// </summary>
        /// <param name="_JobSiteType">SiteType enumeration.</param>
        /// <returns>string</returns>
        private String GetWebTemplateNameForSite(JobType _JobSiteType)
        {
            String _return = String.Empty;
            if (_JobSiteType == JobType.SES)
                _return = "SES Document Center";
            else if (_JobSiteType == JobType.SCF)
                _return = "SCF Document Center";
            else if (_JobSiteType == JobType.DesignBuild)
                _return = "DB Document Center";
            else if (_JobSiteType == JobType.ASES)
                _return = "ASES Document Center";
            else if (_JobSiteType == JobType.SIS)
                _return = "SIS Document Center";
            return _return;
        }

        #endregion

        #region SendEmail

        protected void SendEmailNotification(SendEmail _pSendEmail)
        {
            String _JobNumber = this.lovJobNumber.SelectedValue.ToString();
            JobSiteURLHelper _JobSiteURLHelper = new JobSiteURLHelper(_JobNumber);
            String _SPWebUrl = SPContext.Current.Site.Url;
            String _SetupContractURL = _SPWebUrl + "/_layouts/SDBBE/EditContractFull.aspx?Mode=Insert&PrimeID=2077";

            String _ToEmailAddress = "dboruff@it4e.com";
            String _FromEmailAddress = "dboruff@it4e.com";
            String _CcEmailAddress = "dboruff@it4e.com";
            String _Subject = "New Project Has Been Created";

            String _BodyMsg = String.Empty;
            _BodyMsg += @"<p>";
            _BodyMsg += @"==================================================================================";
            _BodyMsg += @"<br />";
            _BodyMsg += @"The following new Project has been created:";
            _BodyMsg += @"</p>";
            _BodyMsg += @"<ul>";
            _BodyMsg += @"<li style=""margin-bottom:5px;"">Job Number:&#160;" + _JobNumber + "</li>";
            _BodyMsg += @"<li style=""margin-bottom:5px;"">Job Name:&#160;" + this.tbxJobName.Text + "</li>";
            _BodyMsg += @"<li style=""margin-bottom:5px;"">Prime Contract Number:&#160;" + this.tbxPrimeContractNumber.Text + "</li>";
            _BodyMsg += @"</ul>";
            _BodyMsg += @"<ul>";
            _BodyMsg += @"<li style=""margin-bottom:5px;"">For Job Site, <a href=" + _JobSiteURLHelper.JobUrl + ">click here</a>.</li>";
            //_BodyMsg += @"<li style=""margin-bottom:5px;"">For Setting up its Contract, <a href=""http://intranet/sites/pm/_layouts/SDBBE/ListProjectsNew.aspx?Panel=ContractSetup"">click here</a>.</li>";
            _BodyMsg += @"<li style=""margin-bottom:5px;"">For Setting up its Contract, <a href=""" + _SetupContractURL + ">click here</a>.</li>";
            _BodyMsg += @"<li style=""margin-bottom:5px;"">For Setting up its Certified Payroll, <a href=""http://intranet/sites/pm/_layouts/SDBBE/ListProjectsNew.aspx?Panel=CertifiedPayrollSetup"">click here</a>.</li>";
            _BodyMsg += @"<li style=""margin-bottom:5px;"">For Setting up its Estimated Costing, <a href=""http://intranet/sites/pm/_layouts/SDBBE/ListProjectsNew.aspx?Panel=EstimatedCostingSetup"">click here</a>.</li>";
            _BodyMsg += @"<li style=""margin-bottom:5px;"">For Setting up its Bond Justification, <a href=""http://intranet/sites/pm/_layouts/SDBBE/ListProjectsNew.aspx?Panel=BondJustificationSetup"">click here</a>.</li>";
            _BodyMsg += @"<li style=""margin-bottom:5px;"">For Setting up its SharePoint Site, <a href=""http://intranet/sites/pm/_layouts/SDBBE/ListProjectsNew.aspx?Panel=SharePointSiteSetup"">click here</a>.</li>";
            _BodyMsg += @"</ul>";
            _BodyMsg += @"<p>";
            _BodyMsg += @"<br />";
            _BodyMsg += @"==================================================================================";
            _BodyMsg += @"</p>";

            _pSendEmail = new SendEmail(_ToEmailAddress, _FromEmailAddress, _CcEmailAddress, _Subject, _BodyMsg);
        }

        #endregion

        #region Common Functions

        public static String EvalTrimmed(Object container, String expression, int maxLength)
        {
            String _Return = DataBinder.Eval(container, expression) as String;
            if (!String.IsNullOrEmpty(_Return))
            {
                if (_Return.Length > maxLength)
                    _Return = _Return.Substring(0, maxLength) + " ...";
            }
            else
                _Return = String.Empty;
            return _Return;
        }



        protected void SetTabsDefaults()
        {
            this.lbtnTab01.Attributes.Add("class", "tab");
            this.lbtnTab01.ForeColor = Color.Black;

            this.lbtnTab02.Attributes.Add("class", "tab");
            this.lbtnTab02.ForeColor = Color.Black;

            this.lbtnTab03.Attributes.Add("class", "tab");
            this.lbtnTab03.ForeColor = Color.Black;

            this.lbtnTab04.Attributes.Add("class", "tab");
            this.lbtnTab04.ForeColor = Color.Black;

            this.lbtnTab05.Attributes.Add("class", "tab");
            this.lbtnTab05.ForeColor = Color.Black;
        }

        private String GetFilters()
        {
            String _Return = String.Empty;
            for (int i = 0; i < this.cbxFilters.Items.Count; i++)
            {
                if (i == 0)
                {
                    if (this.cbxFilters.Items[i].Selected)
                        _Return = this.cbxFilters.Items[i].ToString();
                }
                else
                {
                    if (this.cbxFilters.Items[i].Selected)
                        _Return += "," + this.cbxFilters.Items[i].ToString();
                }
            }
            return _Return;
        }

        #endregion

        #region Error Handling

        protected void LogTheError(String _pTableName, String _pOperation, String _pID, Exception _pEx)
        {
            ErrorLog _ErrorLog = new ErrorLog();
            _ErrorLog.SolutionName = _SolutionName;
            _ErrorLog.ModuleClassName = _ModuleClassName;
            if (_pID == String.Empty)
                _ErrorLog.TableName = _pTableName;
            else
                _ErrorLog.TableName = _pTableName + ", ID=" + _pID;
            _ErrorLog.Operation = _pOperation;
            if (_pEx.InnerException == null)
                _ErrorLog.ErrorMessage = _pEx.Message.ToString();
            else
                _ErrorLog.ErrorMessage = _pEx.Message.ToString() + "; " + _pEx.InnerException.Message.ToString();
            using (ErrorLogDAO _ErrorLogDAO = new ErrorLogDAO())
            {
                _ErrorLogDAO.SaveItem_ErrorLog(_ErrorLog);
            }
        }

        #endregion

        protected void btnDeleteWageDet_Command(object sender, CommandEventArgs e)
        {
            try
            {
                using (SDBBEDAO _SDBBEDAO = new SDBBEDAO())
                {
                    Int32 _assignWageDeterminationID = Convert.ToInt32(e.CommandArgument);
                    Int32 _PrimeID = 0;
                    Int32.TryParse(Page.Request.QueryString["PrimeID"].ToString(), out _PrimeID);

                    AssignWageDeterminationData _AssignWageDetData = new AssignWageDeterminationData();
                    _AssignWageDetData = _SDBBEDAO.SelectItem_AssignWageDeterminationData_ByPrimeID_and_DocID(_PrimeID, _assignWageDeterminationID);
                    _SDBBEDAO.DeleteItem_AssignWageDeterminationData(_AssignWageDetData);
                    DisplayTab02();
                }
            }
            catch (Exception ex)
            {
                LogTheError(_TableName, _Operation, String.Empty, ex);
            }
        }
    }
}
